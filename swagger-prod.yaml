swagger: '2.0'
info:
  title: Cloud Prisma Margin Estimator API
  version: "1.0"
  description: >-
    Cloud Prisma Margin Estimator (cPME) calculates margin for an uploaded portfolio
    according to Eurex Prisma methodology. The application is available to both members
    and non-members of Eurex Clearing. It can be accessed via web user interface,
    see [cPME GUI](https://eurexmargins.prod.dbgservice.com), or directly through API,
    described here.

    It supports also greek and stress price calculation - these analytical tools
    are not related to the margin.

    [FAQ](https://deutsche-boerse-risk.github.io/CloudPrismaMarginEstimator/)

    ## API Key

    For API access please register at
    [Deutsche Boerse API website](https://console.developer.deutsche-boerse.com/apis).

    There you create your project, subscribe to "Prisma Margin Estimator" API
    and get a key. Use the key in a request header as `X-DBP-APIKEY`, e.g.:


    <pre>
    curl --header 'X-DBP-APIKEY: your-key' \
      https://api.developer.deutsche-boerse.com/prod/prisma-margin-estimator/1.0.0/products
    </pre>


    Requests from web API portals (Apiary, SwaggerHub) must contain the key as well.

    ## Example in Python

    The **[crossmargining.py](https://github.com/Deutsche-Boerse-Risk/CloudPrismaMarginEstimator-API/blob/master/examples/python/crossmargining.py)** generates a portfolio in CSV format.
    The portfolio consists of a 10Y EUR interest rate swap starting two days from today and a short position in Euro-Bund futures.
    Initial margin is calculated with and without cross margining (xm = True and xm = False, respectively) and results are printed.
    Replace xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx by your API key (see above).


    ## Compressing request and response

    Both requests and responses can be compressed by gzip which can reduce response time for large requests and bypass request size limits.
    Use of compression in submitted request is indicated by `Content-Encoding: gzip` header.
    Compressed response is requested by `Accept-Encoding: gzip` header.
    For example:


    <pre>echo '{"etd_portfolio":[{"line_no":1,"product_id":"FEXD","maturity":202812,"net_ls_balance":1}]}' \
      | gzip \
      | curl -s -H "X-DBP-APIKEY: your-key" -H "Content-Type: application/json" \
        https://api.developer.deutsche-boerse.com/prod/prisma-margin-estimator/1.0.0/estimator \
        --data-binary @- -H "Content-Encoding: gzip" -H "Accept-Encoding: gzip" \
      | gunzip
    </pre>


    It is also possible to use compression only for request or only for response.

    ## Business date and time

    The requests can contain optional business date and time attributes.
    The application finds the latest snapshot from the requested business date
    with timestamp equal or smaller than the requested time.
    If time is not given then the latest timestamp of the business date is used.

    It takes about one minute to start the instance for specified snapshot.
    That instance can then serve subsequent requests for the same snapshot.
    After some inactive time the instance is shutdown.

    Example of requesting the latest snapshot of given date, in GET and POST type of request:

    <pre>curl -H 'X-DBP-APIKEY: your-key' \
      'https://api.developer.deutsche-boerse.com/prod/prisma-margin-estimator/1.0.0/series?products=FGBM&business_date=20190307'
    echo '{"snapshot":{"business_date":20190307}, "etd_portfolio":[{"line_no":1,"product_id":"FEXD","maturity":202812,"net_ls_balance":1}]}' \
      | curl -H 'X-DBP-APIKEY: your-key' \
        'https://api.developer.deutsche-boerse.com/prod/prisma-margin-estimator/1.0.0/estimator' \
        --data-binary @-
    </pre>


    If business date is not given, the latest business date is used.

    Response contains identification of the selected snapshot,
    see attributes `business_date`, `live` and `live_timestamp`.

    ## Change log

    - 5.4.0 fixed bug in etd_cp005 parser

    - 5.2.0 request with live=false without date means last end-of-day

    - 4.2.1 OTC trade details in estimator response

    - 4.1.1 historical snapshots also for list of products, series and currencies

    - 4.0.0 introduction of OTC portfolio components, cross-margining and historical snapshots

  termsOfService: 'https://eurexmargins.prod.dbgservice.com/terms'
host: api.developer.deutsche-boerse.com
basePath: /prod/prisma-margin-estimator/1.0.0/
schemes:
  - https
paths:
  /products:
    get:
      summary: List All Products
      description: >-
        Lists all exchange-traded products, Eurex and ECC.
        Only `product` and `instrument_type` are returned by default.
        Remaining attributes (see response) are returned only if specified in `extrafields`.
      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - $ref: '#/parameters/extrafields'
        - $ref: '#/parameters/business_date'
        - $ref: '#/parameters/live'
        - $ref: '#/parameters/live_timestamp'
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              products:
                - product: OSMI
                  instrument_type: option
                  clearing_house: EUXCDEFF
                  prod_name: OPT ON SWISS MARKET INDEX
                  prod_isin: CH0008616382
                  underlying_isin: CH0009980894
                  currency: CHF
                  product_type: OINX
                  extended_product_type:
                  margin_style_flag: T
                  exercise_style_flag: E
                  product_settlement_type: CASH
                  final_settlement_time: '09:00'
                  product_tick_size: 0.1
                  product_tick_value: 1.0
                  liquidation_group: PEQ01
                  xm_eligibility: false
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              products:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      $ref: '#/definitions/product_id'
                    instrument_type:
                      type: string
                      enum: [future,option]
                      description: Product line, i.e. either future or option
                    clearing_house:
                      type: string
                    prod_name:
                      type: string
                    prod_isin:
                      type: string
                    underlying_isin:
                      type: string
                    currency:
                      type: string
                    product_type:
                      type: string
                    extended_product_type:
                      type: string
                      description: refinement of product type, can be empty
                    margin_style_flag:
                      type: string
                      enum: [T,F]
                      description: T for traditional, F for future-style
                    exercise_style_flag:
                      $ref: '#/definitions/exercise_style_flag'
                    product_settlement_type:
                      type: string
                      enum: [PHYSICAL,CASH]
                    final_settlement_time:
                      type: string
                    product_tick_size:
                      type: number
                    product_tick_value:
                      type: number
                    liquidation_group:
                      $ref: '#/definitions/liquidation_group'
                    xm_eligibility:
                      type: boolean
                  required:
                    - product
                    - instrument_type
  /series:
    get:
      summary: List Series of a Product
      description: >-
        List all series of exchange traded product(s).
        Attributes upto `iid` are returned by default.
        Remaining attributes (see response) are returned only if specified in `extrafields`.
      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - $ref: '#/parameters/extrafields'
        - $ref: '#/parameters/business_date'
        - $ref: '#/parameters/live'
        - $ref: '#/parameters/live_timestamp'
        - name: products
          in: query
          description: Product ID, there can be multiple instances of the parameter to request series for several products
          required: true
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              list_series:
                - product_id: OGBL
                  contract_maturity: 201906
                  expiry_maturity: 201906
                  call_put_flag: C
                  exercise_price: 160
                  version_number: '0'
                  iid: 18249016
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              list_series:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      $ref: '#/definitions/product_id'
                    contract_maturity:
                      $ref: '#/definitions/contract_maturity'
                    expiry_maturity:
                      $ref: '#/definitions/expiry_maturity'
                    call_put_flag:
                      $ref: '#/definitions/call_put_flag'
                    exercise_price:
                      $ref: '#/definitions/exercise_price'
                    version_number:
                      $ref: '#/definitions/version_number'
                    iid:
                      $ref: '#/definitions/iid'
                    act_trade_unit_no:
                      type: number
                    days_to_expiration:
                      type: number
                    trade_unit_value:
                      type: number
                    exercise_style_flag:
                      $ref: '#/definitions/exercise_style_flag'
                  required:
                    - product_id
                    - contract_maturity
                    - expiry_maturity
                    - version_number
                    - iid
  /clearing_currencies:
    get:
      summary: List All Clearing Currencies
      description: List of clearing currencies that can be used in `estimator` request.
      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - $ref: '#/parameters/business_date'
        - $ref: '#/parameters/live'
        - $ref: '#/parameters/live_timestamp'
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              clearing_currencies:
                - EUR
                - CHF
                - USD
                - GBP
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              clearing_currencies:
                type: array
                items:
                  type: string
  /estimator:
    post:
      summary: Margin Calculation Request
      description: >-
        # Margin Calculation

        Portfolio is sent in the request and margin is returned as a response.
        The request can contain exchange traded derivatives (ETD) portfolio or OTC portfolio or both:

        - ETD is submitted as
          - `etd_portfolio` JSON array, see request model
          - or `etd_csv` with positions in CSV format
          - or `etd_cp005`, i.e. Eurex CP005 report

        - OTC is submitted as
          - `otc_csv` with trades in CSV format known from Margin Calculator or Prisma Margin Estimator, see description bellow
          - or `otc_sensitivities` with sensitivities in CSV format
          - or `otc_fpml`
          - or `otc_cb202`, i.e. EurexOTC CB202 or CB207 report


        ## ETD portfolio as JSON array

        `etd_portfolio` instruments are specified either by full key  or by technical `iid`. The technical `iid` takes precedence if both keys are sent. The position always needs `line_no` and `net_ls_balance`.

        The full key for series depends on instrument type, these are the mandatory fields:

        - Future: `product`, `maturity` as YYYYMM (DD can be added but is ignored)

        - Option: `product`, `maturity` as YYYYMM (DD can be added but is ignored), `call_put_flag`, `exercise_price`

        - Flex Future: `instrument_type`: "Flex Future", `product`, `maturity` as YYYYMMDD

        - Flex Option: `instrument_type`: "Flex Option", `product`, `maturity` as YYYYMMDD, `call_put_flag`, `exercise_price`, `exercise_style`


        Only already existing Flex Future or Flex Option can be submitted, not a new one (e.g. different strike or expiry day).

        Example of minimal request with one future contract:


        <pre>
        curl --header 'X-DBP-APIKEY: your-key' \
          https://api.developer.deutsche-boerse.com/prod/prisma-margin-estimator/1.0.0/estimator \
          -d '{"etd_portfolio":[{"line_no":1,"product_id":"FEXD","maturity":202812,"net_ls_balance":1}]}'
        </pre>


        ## ETD CSV format

        See the example in [GUI](https://eurexmargins.prod.dbgservice.com/estimator) for simpler CSV format that does not support flexible instruments or use the CSV format known from Margin Calculator.

        ## OTC CSV format

        The CSV describing all trades is submitted as one string in `csv` attribute of `otc_csv` structure starting with header.
        Lines separated by `\n`.

        One line contains all information for one trade, including both its legs.
        All columns must be present, although some can be empty.
        Mandatory columns are marked by asterisk *.
        For certain trade types, even some optional columns must be filled, see the description.
        If unsure about possible combinations of attribute values please check
          [EurexOTC Clear IRS Product List](https://www.eurexclearing.com/resource/blob/227404/ff4638f2a3bfedbf511868ef54c6a153/data/ec15075e_Attach.pdf).


        ### Basic OTC trade attributes

        - internalTradeID*: id of the trade to distinguish it in drilldown, must be unique

        - tradeType*: IRS (or Swap), OIS, FRA, ZCIS

        - currency*: ISO code of currency, e.g. EUR, CHF, USD, GBP

        - effectiveDate*: effective date as DD/MM/YYYY, e.g. 20/12/2018

        - terminationDate*: termination date as DD/MM/YYYY, e.g. 20/12/2028


        ### Pay leg attributes

        - payLegType*: fixedLeg or floatingLeg

        - payLegSpread: rate for fixedLeg in %, or spread (optional) for floatingLeg in bp

        - payLegIndex: index for floatingLeg, if empty, default index for the currency is selected

        - payInterestFixedAmount: allowed for fixedLeg only, lump sum paid at maturity of zero coupon swap

        - payNotional*: notional

        - payPaymentPeriod*: 1M, 3M, 6M, 12M, 1Y, 1T (for zero-coupon)

        - payPeriodStartVNS: fill only for VNS

        - payCompounding: fill only for compounding swap, Flat or Straight

        - payCompoundingIndexPeriod: period for compounding swap, 1M, 3M, 6M, 12M, 1Y

        - payStub: fill only if the leg has a stub, LongFinal, LongInitial, ShortInitial, ShortFinal

        - payFirstRate: first pre-defined rate

        - payFirstInterpolationTenor: stub interpolation tenor for floatingLeg, 1W, 1M, 3M, 6M, ...

        - paySecondInterpolationTenor: stub interpolation tenor for floatingLeg, 1W, 1M, 3M, 6M, ...

        - payDayCountMethod*: 30/360, 30E/360, 30E/360.ISDA, ACT/360, ACT/365.FIXED, ACT/ACT.ISDA, ACT/365.ISDA, ACT/ACT.ICMA, ACT/ACT.ISMA, 1/1, ...

        - payBusinessDayConvention: MODFOLLOWING, FOLLOWING, PRECEDING, ...

        - payPaymentCalendar: EUTA, CHZU, GBLO, USNY, DEFR, ITMI, FRPA, ESMA, BEBR, JPTO, DKCO, NOOS, SEST, PLWA, ... calendars can be combined with "+"

        - payAdjustment: ADJUSTED, UNADJUSTED, MAT_UNADJUSTED, ...

        - payRollMethod: Standard, IMM, EOM, ...


        ### Receive leg attributes

        The receive leg has the same attributes as pay leg above, except prefix "pay" is replaced by "rcv".

        ## OTC sensitivities in CSV format

        The whole portfolio is described by a table of DV01 sensitivities, submitted in CSV format known from Margin Calculator. The columns are curves and rows maturities - see the example in request model.

        ## OTC reports CB202, CB207

        See Eurex OTC member documentation for CB202 and CB207 reports.
        Only positions from one specified account or risk netting unit (ARNU) will be evaluated, see the attributes of `otc_cb202` structure below.
        We recommend using gzip compression in the request, see above.

        ## OTC FpML

        See the public definition for FpML format. It is submitted as `otc_fpml`.
        The `party` attribute is mandatory, see below.
        We recommend using gzip compression in the request, see above.

      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - name: body
          in: body
          schema:
            type: object
            example:
              etd_portfolio:
                - line_no: 1
                  product_id: FEXD
                  maturity: 202812
                  net_ls_balance: 10
                - line_no: 2
                  product_id: OESX
                  maturity: 202812
                  call_put_flag: C
                  exercise_price: 2400
                  net_ls_balance: -10
            properties:
              snapshot:
                $ref: '#/definitions/snapshot'
              clearing_currency:
                $ref: '#/definitions/clearing_currency'
              is_cross_margined:
                type: boolean
                description: enable cross-margining between OTC and Fixed Income
                example: True
              etd_portfolio:
                type: array
                items:
                  type: object
                  properties:
                    line_no:
                      $ref: '#/definitions/line_no'
                    product_id:
                      $ref: '#/definitions/product_id'
                    maturity:
                      $ref: '#/definitions/maturity'
                    call_put_flag:
                      $ref: '#/definitions/call_put_flag'
                    exercise_price:
                      $ref: '#/definitions/exercise_price'
                    version_number:
                      $ref: '#/definitions/version_number'
                    iid:
                      $ref: '#/definitions/iid'
                    instrument_type:
                      $ref: '#/definitions/instrument_type'
                    exercise_style:
                      $ref: '#/definitions/exercise_style'
                    net_ea:
                      $ref: '#/definitions/net_ea'
                    net_ls_balance:
                      $ref: '#/definitions/net_ls_balance'
                  required:
                    - line_no
                    - net_ls_balance
              etd_csv:
                type: object
                properties:
                  csv:
                    type: string
                    description: ETD portfolio as one string in CSV, in Margin Calculator GUI format or Margin Estimator GUI format
                required:
                - csv
              etd_cp005:
                type: object
                properties:
                  member:
                    type: string
                    description: optional attribute to process only positions of the member, if not given the clearing member is used
                  account:
                    type: string
                    description: optional attribute to process only positions on that account, if not given "PP" account is used
                  xml:
                    type: string
                    description: exchange traded portfolio as Eurex report CP005
                required:
                  - xml
              otc_csv:
                $ref: '#/definitions/otc_csv'
              otc_sensitivities:
                $ref: '#/definitions/otc_sensitivities'
              otc_cb202:
                $ref: '#/definitions/otc_cb202'
              otc_fpml:
                $ref: '#/definitions/otc_fpml'
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              clearing_currency: EUR
              errors:
                - line_no: 2
                  error_msg: 'Line 1 instrument iid not recognized: 736947'
              portfolio_margin:
                - liquidation_group: PEQ01
                  liquidation_group_split: PFI01_HP2_T0-99999
                  initial_margin: 3161.708587
                  market_risk: 3155.266149
                  liquidity_addon: 6.442439
                  long_option_credit: 0
                  time_to_expiry_adjustment: 0
                  premium_margin: 0
                  market_risk_per_rms:
                    - rms_name: SIMPLE STRESS VAR 3
                      simulation_type: Historical
                      rms_market_risk: 4991.692879
                      weighting_factor: 0.51
              drilldowns:
                - line_no: 1
                  product_id: OGBL
                  call_put_flag: C
                  exercise_price: 160
                  version_number: '0'
                  iid: 18249016
                  maturity: 201806
                  net_ls_balance: 10
                  liquidation_group: PFI01
                  liquidation_group_split: PFI01_HP2_T0-99999
                  component_margin: 2382.083819
                  component_margin_currency: EUR
                  premium_margin: 0
                  premium_margin_currency: EUR
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              clearing_currency:
                $ref: '#/definitions/clearing_currency'
              errors:
                type: array
                items:
                  type: object
                  properties:
                    line_no:
                      type: string
                    error_msg:
                      type: string
              portfolio_margin:
                type: array
                description: Margin on LGS level, higher levels can be summed on UI. Also initial margin can be calculated as a sum of all components except premium margin
                items:
                  type: object
                  properties:
                    liquidation_group:
                      $ref: '#/definitions/liquidation_group'
                    liquidation_group_split:
                      $ref: '#/definitions/liquidation_group_split'
                    initial_margin:
                      type: number
                      description: Initial margin on liquidation group split level, equals to market risk plus add ons
                    market_risk:
                      type: number
                      description: Market risk from ReportCP046
                    liquidity_addon:
                      type: number
                      description: Liqu risk from ReportCP046
                    long_option_credit:
                      type: number
                      description: Long option credit from ReportCP046
                    time_to_expiry_adjustment:
                      type: number
                      description: Time to Expiry Adjustment a.k.a. TEA from ReportCP046, introducedwith Prisma R8.0
                    premium_margin:
                      type: number
                      description: Premium margin from ReportCP046
                    market_risk_per_rms:
                      type: array
                      items:
                        type: object
                        properties:
                          rms_name:
                            type: string
                            description: Risk Measure Set name
                          simulation_type:
                            type: string
                            enum: [Historical, Stress, Event]
                            description: Risk Measure Set type
                          rms_market_risk:
                            type: number
                            description: RMS market risk before weighting
                          weighting_factor:
                            type: number
                            description: RMS weighting factor to be applied before aggregation to LGS level
              drilldowns:
                type: array
                description: Margin figures on position level. Full business key is used, it is not possible to map to input line_no one to one because positions may be aggregated or split
                items:
                  type: object
                  properties:
                    line_no:
                      $ref: '#/definitions/line_no'
                    product_id:
                      $ref: '#/definitions/product_id'
                    maturity:
                      $ref: '#/definitions/maturity'
                    call_put_flag:
                      $ref: '#/definitions/call_put_flag'
                    exercise_price:
                      $ref: '#/definitions/exercise_price'
                    version_number:
                      $ref: '#/definitions/version_number'
                    iid:
                      $ref: '#/definitions/iid'
                    instrument_type:
                      $ref: '#/definitions/instrument_type'
                    exercise_style:
                      $ref: '#/definitions/exercise_style'
                    net_ls_balance:
                      $ref: '#/definitions/net_ls_balance'
                    liquidation_group:
                      $ref: '#/definitions/liquidation_group'
                    liquidation_group_split:
                      $ref: '#/definitions/liquidation_group_split'
                    component_margin:
                      $ref: '#/definitions/component_margin'
                    component_margin_currency:
                      $ref: '#/definitions/component_margin_currency'
                    premium_margin:
                      type: number
                      description: Premium margin for the position
                    premium_margin_currency:
                      type: string
                      description: Currency of premium margin - currency of the product, can be different from clearing currency
              otc_drilldowns:
                type: array
                description: Margin figures and short trade desription on OTC trade level. Internal Trade Id is used as a key.
                items:
                  type: object
                  properties:
                    trade_id:
                      $ref: '#/definitions/trade_id'
                    liquidation_group:
                      $ref: '#/definitions/liquidation_group'
                    liquidation_group_split:
                      $ref: '#/definitions/liquidation_group_split'
                    npv:
                      type: number
                      description: Net Present Value of the trade in notional currency
                    dv01:
                      type: number
                      description: DV01 sensitivity of the trade in notional currency
                    component_margin:
                      $ref: '#/definitions/component_margin'
                    component_margin_currency:
                      $ref: '#/definitions/component_margin_currency'
                    type:
                      $ref: '#/definitions/otc_type'
                    pay:
                      $ref: '#/definitions/pay'
                    receive:
                      $ref: '#/definitions/receive'
                    notional:
                      $ref: '#/definitions/notional'
                    notional_currency:
                      $ref: '#/definitions/notional_currency'
                    maturity:
                      $ref: '#/definitions/otc_maturity'
  /greeks:
    post:
      summary: Greek Calculation Request
      description: >-
        Calculate analytical greeks (sensitivities) for given exchange traded instruments.
        The instruments are specified by a technical `iid` that can be obtained by `series` query.
        Two types of greeks are offered:

        - numerical derivative of change in instrument price in product currency w.r.t. change in given variable, e.g. DELTA is w.r.t. change in underlying price

        - the above greek converted to EUR:
          - EURO_DELTA, EURO_GAMMA: (_underlying price_ + _price offset_) \* _greek_ \* _fx conversion to EUR_
          - EURO_RHO, EURO_THETA, EURO_VEGA: _greek_ \* _fx conversion to EUR_

        Optionally, vector of relative underlying shifts can be supplied to calculate stress greeks (except DV01, there shifts are ignored) in scenarios where underlying price moved.
        Note that the method of calculation is slightly different, therefore the result for request without shift may differ from result with zero shift.

        To get a position greek, the instrument greek has to be multiplied by position size and trade unit value (TUV).
      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - name: body
          in: body
          schema:
            type: object
            example:
              greek_types:
                - EURO_DELTA
                - EURO_VEGA
              underlying_shifts_rel:
                - -0.01
                - 0.01
              iids:
                - 26807581
                - 27471356
            properties:
              snapshot:
                $ref: '#/definitions/snapshot'
              greek_types:
                $ref: '#/definitions/greek_types'
              underlying_shifts_rel:
                $ref: '#/definitions/underlying_shifts_rel'
              iids:
                $ref: '#/definitions/iids'
            required:
              - greek_types
              - iids
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              greek_types:
                - EURO_DELTA
              underlying_shifts_rel:
                - -0.01
                - 0.01
              greeks:
                - iid: 26807581
                  values: [[674.0,565.0]]
                - iid: 27471356
                  values: [[0.65957,0.68090]]
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              greek_types:
                $ref: '#/definitions/greek_types'
              underlying_shifts_rel:
                $ref: '#/definitions/underlying_shifts_rel'
              greeks:
                type: array
                items:
                  type: object
                  description: Array of arrays of greeks for given instrument per greek type and per underlying shift rel, in the order given by type and shift vectors
                  properties:
                    iid:
                      $ref: '#/definitions/iid'
                    values:
                      type: array
                      items:
                        type: number
  /stressmatrix:
    post:
      summary: Stress Matrix Request
      description: >-
        Calculate theoretical prices of given exchange traded instruments in stressed scenarios.
        The scenario can have shifted underlying price and/or volatility.
        In one request, vector of underlying price shifts and volatility shifts is specified
        and the result then contains stress matrix with prices for each combination
        of the underlying price and volatility shift.

        The volatility shift can be either relative or absolute. For example, when current volatility is 20%:

        - relative shift 0.1 means the stressed volatility is 20% \* (1+0.1) = 22%

        - absolute shift 0.1 means stressed volatility is 20% + 0.1% = 20.1%


        For futures, volatility shift has no effect and the underlying price shift changes
        directly the future price, theoretical pricing model is not used.
      parameters:
        - $ref: '#/parameters/x_dbp_apikey'
        - name: body
          in: body
          schema:
            type: object
            example:
              underlying_shifts_rel:
                - 0.01
              volatility_shifts:
                - -0.10
                - 0.10
              volatility_shift_type: ABSOLUTE
              iids:
                - 26807581
                - 27471356
            properties:
              snapshot:
                $ref: '#/definitions/snapshot'
              underlying_shifts_rel:
                $ref: '#/definitions/underlying_shifts_rel'
              volatility_shifts:
                $ref: '#/definitions/volatility_shifts'
              volatility_shift_type:
                $ref: '#/definitions/volatility_shift_type'
              iids:
                $ref: '#/definitions/iids'
            required:
              - iids
      responses:
        '200':
          description: OK
          headers: {}
          examples:
            application/json:
              business_date: 20180809
              live: false
              live_timestamp: 0
              underlying_shifts_rel:
                - 0.01
              volatility_shifts:
                - -0.1
                - 0.1
              volatility_shift_type: RELATIVE
              stress_matrix:
                - iid: 26807581
                  values: [[0.65957],[0.68090]]
                - iid: 27471356
                  values: [[0.65957],[0.68090]]
          schema:
            type: object
            properties:
              business_date:
                $ref: '#/definitions/business_date'
              live:
                $ref: '#/definitions/live'
              live_timestamp:
                $ref: '#/definitions/live_timestamp'
              underlying_shifts_rel:
                $ref: '#/definitions/underlying_shifts_rel'
              volatility_shifts:
                $ref: '#/definitions/volatility_shifts'
              volatility_shift_type:
                $ref: '#/definitions/volatility_shift_type'
              stress_matrix:
                type: array
                items:
                  type: object
                  description: Array of arrays of prices for given instrument per underlying price shift and volatility shift, in the order given by price and vola shift vectors
                  properties:
                    iid:
                      $ref: '#/definitions/iid'
                    values:
                      type: array
                      items:
                        type: array
                        items:
                          type: number

parameters:
  x_dbp_apikey:
    name: X-DBP-APIKEY
    in: header
    description: your key, obtain it by registering at [DBG Digital Business Platform](https://console.developer.deutsche-boerse.com/)
    type: string
    required: true
  extrafields:
    name: extrafields
    in: query
    description: comma-separated list of optional fields that should be returned in addition to the default set of response fields. Alternatively can be specified also as multiple parameter instances instead of comma-separated list.
    required: false
    collectionFormat: csv
    type: array
    items:
      type: string
  business_date:
    name: business_date
    in: query
    type: number
    description: Business date as of which the result is calculated, in YYYYMMDD format
  live:
    name: live
    in: query
    description: Is the snapshot live (meaning intraday or start-of-day)? False for end-of-day.
    type: boolean
  live_timestamp:
    name: live_timestamp
    in: query
    type: number
    description: Timestamp as of which the result is calculated, in milliseconds from epoch. Zero means start-of-day.

definitions:
  business_date:
    type: number
    description: Business date as of which the result is calculated, in YYYYMMDD format
    example: 20181205
  live:
    type: boolean
    description: Is the snapshot live (meaning intraday or start-of-day)? False for end-of-day. In request, False without any date means last end-of-day.
    example: false
  live_timestamp:
    type: number
    description: Timestamp as of which the result is calculated, in milliseconds from epoch. Zero means start-of-day.
    example: 0
  snapshot:
    type: object
    description: Optional point in time as of which the result is calculated. If only business_date is specified, latest snapshot from that business date is used. If only live=False is specified, last EOD is used. The timestamp is used only when live is true.
    properties:
      business_date:
        $ref: '#/definitions/business_date'
      live:
        $ref: '#/definitions/live'
      live_timestamp:
        $ref: '#/definitions/live_timestamp'
  clearing_currency:
    type: string
    description: currency code of the currency in which the result should be calculated
    default: EUR
    example: EUR
  product_id:
    type: string
    description: Unique identifier of a product
    example: OESX
  contract_maturity:
    type: number
    description: Maturity of the instrument in YYYYMM format. Corresponds to contract year/month as shown on Eurex webpage
    example: 202812
  expiry_maturity:
    type: number
    description: Internal value used by Prisma
    example: 202812
  call_put_flag:
    type: string
    enum: [C,P,'']
    description: Call or put flag for options. Empty for futures
    example: P
  exercise_price:
    type: number
    description: Exercise price for options, e.g. 10038.77. Empty for futures
    example: 2400.0
  version_number:
    type: string
    description: Version number. Valid for both options and futures
    example: '0'
    default: '0'
  iid:
    type: number
    description: Technical instrument ID. Needed for analytical requests - greeks, stress prices. If provided in request, all other key attributes are ignored
    example: 27471356
  line_no:
    type: number
    description: Line number, used when reporting errors
    example: 1
  maturity:
    type: number
    description: Maturity of the instrument in YYYYMM or YYYYMMDD format. Day mandatory for flex. Corresponds to contract year/month as shown on Eurex webpage
    example: 202812
  instrument_type:
    type: string
    enum: [Future,Option,Flex Future,Flex Option]
    description: Mandatory for flex, ignored otherwise
    example: Flex Option
  exercise_style:
    type: string
    enum: [EUROPEAN,AMERICAN,'']
    description: Exercise style for options. Mandatory for Flex Option, ignored for standard options - product setup used
    example: AMERICAN
  exercise_style_flag:
    type: string
    enum: [E,A,'']
    description: E for European, A for American, empty for futures; can differ from product exercise style for Flex Option
    example: A
  net_ea:
    type: number
    description: Exercised/Allocated minus Assigned/Notified balance
    example: 0
  net_ls_balance:
    type: number
    description: Long/short balance, negative for short
    example: -100
  otc_csv:
    type: object
    properties:
      csv:
        type: string
        description: OTC portfolio as one string in CSV, format known from Margin Calculator GUI
        example: internalTradeID,tradeType,currency,effectiveDate,terminationDate,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod\n1,FRA,EUR,20/12/2018,20/08/2019,fixedLeg,0.15,,,100000000,3M,,,,,,,,ACT/360,,,,,floatingLeg,,,,100000000,3M,,,,,,,,ACT/360,,,,
    required:
      - csv
  otc_cb202:
    type: object
    properties:
      member:
        type: string
        description: optional, will be matched against RC tag
      account:
        type: string
        description: optional, will be matched against acctTypGrp tag or riskNettingUnit tag, if not given P account is assumed
        default: P
      legal_entity:
        type: string
        description: optional, will be matched against srcSysLEId tag
      xml:
        type: string
        description: EurexOTC report CB202 or report CB207 describing trades as a single string
    required:
      - xml
  otc_fpml:
    type: object
    properties:
      party:
        type: string
        description: matched against partyId tag
      xml:
        type: string
        description: FpML describing trades as a single string
    required:
      - party
      - xml
  otc_sensitivities:
    type: object
    properties:
      csv:
        type: string
        description: aggregated sensitivities in CSV format known from Margin Calculator GUI, as a single string. Example shows the full header row with curves and one row for 1M maturity. Supported maturities are 1M to 11M, 1Y, 15M, 18M, 21M, 2Y to 12Y, 15Y, 20Y, 25Y, 30Y, 40Y, 50Y
        example: Maturity,CHF.LIBOR.1M,CHF.LIBOR.2M,CHF.LIBOR.3M,CHF.LIBOR.6M,CHF.SARON.ON,DKK.CIBOR.6M,EUR.EONIA.ON,EUR.EURIBOR.1M,EUR.EURIBOR.1Y,EUR.EURIBOR.3M,EUR.EURIBOR.6M,GBP.LIBOR.1M,GBP.LIBOR.1Y,GBP.LIBOR.2M,GBP.LIBOR.3M,GBP.LIBOR.6M,GBP.SONIA.ON,JPY.LIBOR.1M,JPY.LIBOR.2M,JPY.LIBOR.3M,JPY.LIBOR.6M,JPY.TONAR.ON,NOK.NIBOR.6M,PLN.WIBOR.6M,SEK.STIBOR.3M,USD.FEDFUNDS.ON,USD.LIBOR.1M,USD.LIBOR.2M,USD.LIBOR.3M,USD.LIBOR.6M\n1M,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
    required:
    - csv
  liquidation_group:
    type: string
    description: Liquidation group
  liquidation_group_split:
    type: string
    description: Liquidation group split
  component_margin:
    type: number
    description: Initial margin on position level is a approximation based on compVaR. compVaR is calculated to split VaR among positions, then other add-ons are added proportionally to compVaR
  component_margin_currency:
    type: string
    description: Currency of component margin
  trade_id:
    type: string
    description: internalTradeID or tradeId as submitted in the request
    example: "1"
  otc_type:
    type: string
    description: FRA, FixedFloat, Basis, OIS or Inflation
    example: FRA
  pay:
    type: string
    description: pay leg, either Fixed rate or index plus optional spread
    example: Fixed 0.15%
  receive:
    type: string
    description: receive leg, either Fixed rate or index plus optional spread
    example: EUR-EURIBOR-3M +2bp
  notional:
    type: number
    description: trade notional
    example: 100000000
  notional_currency:
    type: string
    description: notional currency
    example: EUR
  otc_maturity:
    type: string
    description: total maturity since effective date, in years
    example: 0.8Y
  greek_types:
    type: array
    description: Greek types, array with the following valid values
    items:
      type: string
      enum: [DELTA, GAMMA, RHO, THETA, VEGA, DV01, EURO_DELTA, EURO_GAMMA, EURO_RHO, EURO_THETA, EURO_VEGA]
    example: [EURO_DELTA, EURO_VEGA]
  underlying_shifts_rel:
    type: array
    description: Vector of underlying price shifts, optional. If not given then the current underlying price is used
    items:
      type: number
    example: [-0.01, 0.01]
  iids:
    type: array
    description: Technical ids of instruments, see series resource
    items:
      type: number
    example: [26807581, 27471356]
  volatility_shifts:
    type: array
    description: Vector of volatility shifts, the unit is specified by volatility shift type. Shifted volatility is floored by 0.01 before theoretical price calculation
    items:
      type: number
    example: [-0.05, 0.05]
  volatility_shift_type:
    type: string
    enum: [RELATIVE, ABSOLUTE]
    description: Volatility shift type, either relative, vola 20% shifted by 0.1 relative = 22%, or absolute, vola 20% shifted by 0.1 absolute = 20.1%
    example: ABSOLUTE
