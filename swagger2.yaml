openapi: 3.0.0
info:
  title: Cloud Prisma Margin Estimator API
  version: '2.0'
  description: >-
    Cloud Prisma Margin Estimator (CPME) calculates margin for an uploaded
    portfolio according to Eurex PRISMA methodology. The application is
    available to both members and non-members of Eurex Clearing. It can be
    accessed via web user interface, see [CPME
    GUI](https://cpme.eurex.com), or directly through API,
    described here.


    The key request is `/estimator`, it is the only request you need to
    calculate the margin. Other requests provide lists or details of
    instruments, available dates etc. CPME supports also greek and stress price
    calculation - these analytical tools are not related to the margin.


    Part of the API is also Cloud Default Fund Estimator (CPDE) which
    *estimates* Default Fund contribution for an uploaded portfolio according
    to Eurex methodology. Its key resource is `/default_fund`, similar `/estimator`
    up to the following differences: historical calculation is not possible
    for Default Fund; OTC portfolio support is planned only in future.


    [FAQ](https://deutsche-boerse-risk.github.io/CloudPrismaMarginEstimator/)

    ## API Key

    For API access please register at [Deutsche Boerse API
    website](https://console.developer.deutsche-boerse.com/apis).


    There you create your project, subscribe to "Prisma Margin Estimator" API
    and get a key. Use the key in a request header as `X-DBP-APIKEY`, e.g.:


    <pre> curl --header 'X-DBP-APIKEY: your-key' \
      https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/products
    </pre>


    Requests from web API portals (Apiary, SwaggerHub) must contain the key as
    well.

    ## Example in Python

    The
    **[crossmargining.py](https://github.com/Deutsche-Boerse-Risk/CloudPrismaMarginEstimator-API/blob/master/examples/python/crossmargining.py)**
    generates a portfolio in CSV format. The portfolio consists of a 10Y EUR
    interest rate swap starting two days from today and a short position in
    Euro-Bund futures. Initial margin is calculated with and without cross
    margining (xm = True and xm = False, respectively) and results are printed.
    Replace xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx by your API key (see above).


    ## Compressing request and response

    Both requests and responses can be compressed by gzip which can reduce
    response time for large requests and bypass request size limits. Use of
    compression in submitted request is indicated by `Content-Encoding: gzip`
    header. Compressed response is requested by `Accept-Encoding: gzip` header.
    For example:


    <pre>echo
    '{"portfolio_components":[{"type":"etd_portfolio","etd_portfolio":[{"line_no":1,"product_id":"FEXD","contract_date":20301220,"net_ls_balance":1}]}]}'
    \
      | gzip \
      | curl -s -H "X-DBP-APIKEY: your-key" -H "Content-Type: application/json" \
        https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/estimator \
        --data-binary @- -H "Content-Encoding: gzip" -H "Accept-Encoding: gzip" \
      | gunzip
    </pre>


    It is also possible to use compression only for request or only for
    response.

    ## Business date and time

    The requests can contain optional business date and time attributes. The
    application finds the latest snapshot from the requested business date with
    timestamp equal or smaller than the requested time. If time is not given
    then the latest timestamp of the business date is used.


    It takes several minutes to start the instance for a specified snapshot,
    That instance can then serve subsequent requests for the same snapshot.
    After some inactive time the instance is shutdown. It is recommended not to
    specify a date and time and calculate current margin or margin as of last
    end-of-day, see below.


    Example of requesting the latest snapshot of given date, in GET and POST
    type of request:


    <pre>curl -H 'X-DBP-APIKEY: your-key' \
      'https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/series?products=FGBM&business_date=20190307'
    echo
    '{"snapshot":{"business_date":20190307},"portfolio_components":[{"type":"etd_portfolio","etd_portfolio":[{"line_no":1,"product_id":"FEXD","contract_date":20301220,"net_ls_balance":1}]}]}'
    \
      | curl -H 'X-DBP-APIKEY: your-key' \
        'https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/estimator' \
        --data-binary @-
    </pre>


    If business date is not given, the latest business date is used. If only
    live=False is specified, last end-of-day is used. Calculation instance for
    these two requests is always up, you should not experience any delay.


    Response contains identification of the selected snapshot, see attributes
    `business_date`, `live` and `live_timestamp`.

    ## Change log

    - x.x.x OTC indicative margin for IRS swaps

    - 7.1.0 Indicative margin extended; line errors contain portfolio

    - 7.0.0 OTC portfolio can be submitted also as CC233 sensitivities report

    - 6.8.0 Security Basket ISIN, errors explained, upgrade to OpenAPI 3.0 description format

    - 6.5.0 ETD maturity specified preferably by contract_date

    - 6.3.1 Indicative margin resource

    - 6.2.0 Cash Market Repo, ETD CP005 and ETD CSV added to API v2

    - 6.1.1 default 1T payment period for inflation swaps, ignore unknown
    calendars

    - 5.7.0 support for inflation swaps

    - 5.2.0 request with live=false without date means last end-of-day

    - 4.2.2 list of snapshots can be requested, OTC sensitivities

    - 4.2.1 OTC trade details resource and also included in estimator response

    - 4.1.1 historical snapshots also for list of products, series and
    currencies
  termsOfService: https://cpme.eurex.com/terms
servers:
  - url: https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0
    description: production API with static IP
paths:
  /products:
    get:
      summary: List All Products
      description: >-
        Lists all exchange-traded products, Eurex and ECC. Only `product` and
        `instrument_type` are returned by default. Remaining attributes (see
        response) are returned only if specified in `extrafields`.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/extrafields'
        - $ref: '#/components/parameters/business_date'
        - $ref: '#/components/parameters/live'
        - $ref: '#/components/parameters/live_timestamp'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                products:
                  - product: OSMI
                    instrument_type: option
                    clearing_house: EUXCDEFF
                    prod_name: OPT ON SWISS MARKET INDEX
                    prod_isin: CH0008616382
                    underlying_isin: CH0009980894
                    currency: CHF
                    product_type: OINX
                    extended_product_type: null
                    margin_style_flag: T
                    exercise_style_flag: E
                    product_settlement_type: CASH
                    final_settlement_time: '09:00'
                    product_tick_size: 0.1
                    product_tick_value: 1
                    liquidation_group: PEQ01
                    xm_eligibility: false
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          $ref: '#/components/schemas/product_id'
                        instrument_type:
                          type: string
                          enum:
                            - future
                            - option
                          description: Product line, i.e. either future or option
                        clearing_house:
                          type: string
                        prod_name:
                          type: string
                        prod_isin:
                          type: string
                        underlying_isin:
                          type: string
                        currency:
                          $ref: '#/components/schemas/currency'
                        product_type:
                          type: string
                        extended_product_type:
                          type: string
                          description: refinement of product type, can be empty
                        margin_style_flag:
                          type: string
                          enum:
                            - T
                            - F
                          description: T for traditional, F for future-style
                        exercise_style_flag:
                          $ref: '#/components/schemas/exercise_style_flag'
                        product_settlement_type:
                          type: string
                          enum:
                            - PHYSICAL
                            - CASH
                        final_settlement_time:
                          type: string
                        product_tick_size:
                          type: number
                        product_tick_value:
                          type: number
                        liquidation_group:
                          $ref: '#/components/schemas/liquidation_group'
                        xm_eligibility:
                          type: boolean
                      required:
                        - product
                        - instrument_type
  /series:
    get:
      summary: List Series of a Product
      description: >-
        List all series of exchange traded product(s). Attributes upto `iid` are
        returned by default. Remaining attributes (see response) are returned
        only if specified in `extrafields`.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/extrafields'
        - $ref: '#/components/parameters/business_date'
        - $ref: '#/components/parameters/live'
        - $ref: '#/components/parameters/live_timestamp'
        - name: products
          in: query
          description: >-
            Product ID, there can be multiple instances of the parameter to
            request series for several products.

            The maximum number of specified products is limited by 2048 characters
            limit for URL string. That translates to app 130 products. If more is
            required, we recommend to not specify products - the response will
            contain series of all products.
          required: true
          schema:
            type: string
        - name: flex
          in: query
          description: Return also flex series? True or false. Default setting is false.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                list_series:
                  - product_id: OGBL
                    contract_date: 20190621
                    contract_maturity: 201906
                    expiry_maturity: 201906
                    call_put_flag: C
                    exercise_price: 160
                    version_number: '0'
                    iid: 18249016
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  list_series:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          $ref: '#/components/schemas/product_id'
                        contract_date:
                          $ref: '#/components/schemas/contract_date'
                        contract_maturity:
                          $ref: '#/components/schemas/contract_maturity'
                        expiry_maturity:
                          $ref: '#/components/schemas/expiry_maturity'
                        call_put_flag:
                          $ref: '#/components/schemas/call_put_flag'
                        exercise_price:
                          $ref: '#/components/schemas/exercise_price'
                        version_number:
                          $ref: '#/components/schemas/version_number'
                        iid:
                          $ref: '#/components/schemas/iid'
                        act_trade_unit_no:
                          type: number
                        days_to_expiration:
                          type: number
                        trade_unit_value:
                          type: number
                        exercise_style_flag:
                          $ref: '#/components/schemas/exercise_style_flag'
                        contract_frequency:
                          $ref: '#/components/schemas/contract_frequency'
                      required:
                        - product_id
                        - contract_date
                        - contract_maturity
                        - expiry_maturity
                        - version_number
                        - iid
  /securities:
    get:
      summary: Get attributes of securities
      description: >-
        Get attributes of securities (equities, bonds, subscription rights) for
        given `isin`, or all active securities known to the Risk system if `isin` is
        not specified.

        ## Margin Class and Currency

        The `margin_class_code` returned with the security is its default margin class and
        the `currency` is the default margin class currency. Bonds always have only one
        margin class, the default one. Equities may be assigned to multiple margin
        classes based on settlement currency of the transaction - this is intended
        for some ETFs.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/business_date'
        - $ref: '#/components/parameters/live'
        - $ref: '#/components/parameters/live_timestamp'
        - name: isin
          in: query
          schema:
            type: string
          description: Security ISIN
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                securities:
                  - sec_id: DB1
                    sec_isin: DE0005810055
                    sec_type: SAKT
                    sec_name: DEUTSCHE BOERSE AG
                    iid: 1769
                    currency: EUR
                    security_mnemonic: DB1
                    standard_settlement_period: 2
                    price_unit: ABSOLUTE
                    security_subtype: EQUITY
                    margin_class_code: DB10
                    basket_isin: false
                  - sec_id: null
                    sec_isin: CH0224397171
                    sec_type: BCNF
                    sec_name: EIDGENOSSENSCHAFT 15-30
                    iid: 13528248
                    currency: CHF
                    security_mnemonic: null
                    standard_settlement_period: 3
                    price_unit: PERCENTAGE
                    security_subtype: BOND
                    margin_class_code: S0055
                    basket_isin: false
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  securities:
                    type: array
                    items:
                      type: object
                      description: >-
                        $primary_keys(sec_isin)
                      properties:
                        sec_id:
                          $ref: '#/components/schemas/sec_id'
                        sec_isin:
                          $ref: '#/components/schemas/sec_isin'
                        sec_type:
                          $ref: '#/components/schemas/sec_type'
                        sec_name:
                          $ref: '#/components/schemas/sec_name'
                        iid:
                          $ref: '#/components/schemas/iid'
                        currency:
                          $ref: '#/components/schemas/currency'
                        security_mnemonic:
                          $ref: '#/components/schemas/security_mnemonic'
                        standard_settlement_period:
                          $ref: '#/components/schemas/standard_settlement_period'
                        price_unit:
                          $ref: '#/components/schemas/price_unit'
                        security_subtype:
                          $ref: '#/components/schemas/security_subtype'
                        margin_class_code:
                          $ref: '#/components/schemas/margin_class_code'
                        basket_isin:
                          $ref: '#/components/schemas/basket_isin'
  /clearing_currencies:
    get:
      summary: List All Clearing Currencies
      description: List of clearing currencies that can be used in `/estimator` request.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/business_date'
        - $ref: '#/components/parameters/live'
        - $ref: '#/components/parameters/live_timestamp'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                clearing_currencies:
                  - EUR
                  - CHF
                  - USD
                  - GBP
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  clearing_currencies:
                    type: array
                    items:
                      type: string
  /snapshots:
    get:
      summary: List Available Snapshots
      description: >-
        List of end-of-day or first live snapshots that can be used in other
        requests.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/business_date_from'
        - $ref: '#/components/parameters/business_date_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                snapshots:
                  - business_date: 20180809
                    live: false
                    otc_available: true
                    cash_available: false
                  - business_date: 20180810
                    live: true
                    otc_available: true
                    cash_available: false
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      type: object
                      description: >-
                        $primary_keys(business_date,live)
                      properties:
                        business_date:
                          $ref: '#/components/schemas/business_date'
                        live:
                          $ref: '#/components/schemas/live'
                        otc_available:
                          $ref: '#/components/schemas/otc_available'
                        cash_available:
                          $ref: '#/components/schemas/cash_available'
  /live_snapshots:
    get:
      summary: List Available Live Snapshots for Given Day
      description: >-
        List of live (intraday) snapshots for given `business_date`.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - $ref: '#/components/parameters/business_date'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                snapshots:
                  - business_date: 20180809
                    live: true
                    otc_available: true
                    cash_available: false
                    live_timestamp: 0
                  - business_date: 20180809
                    live: true
                    otc_available: true
                    cash_available: false
                    live_timestamp: 1562162876
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      type: object
                      description: >-
                        $primary_keys(business_date,live,live_timestamp)
                      properties:
                        business_date:
                          $ref: '#/components/schemas/business_date'
                        live:
                          $ref: '#/components/schemas/live'
                        otc_available:
                          $ref: '#/components/schemas/otc_available'
                        cash_available:
                          $ref: '#/components/schemas/cash_available'
                        live_timestamp:
                          $ref: '#/components/schemas/live_timestamp'
  /estimator:
    post:
      summary: Margin Calculation Request
      description: >-
        # Margin Calculation

        Portfolio is sent in the request and margin is returned as a response.
        The request can contain exchange traded derivatives (ETD) portfolio, OTC
        portfolio or Cash Market portfolio (equities and bonds) or any
        combination of these assets:

        - ETD is submitted as
          - `etd_portfolio` JSON array, see request model
          - or `etd_csv` with positions in CSV format
          - or `etd_cp005`, i.e. using Eurex CP005 XML report

        - OTC is submitted as
          - `otc_csv` with trades in CSV format known from Margin Calculator or Prisma Margin Estimator, see description bellow
          - or `otc_sensitivities` with sensitivities in CSV format
          - or `otc_fpml`
          - or `otc_cb202`, i.e. EurexOTC CB202 or CB207 report
          - or `otc_cc233`, i.e. EurexOTC CC233 OTC Sensitivities report

        - Cash Market is submitted as
          - `repo_json` JSON array of `repo_json_position` objects, see the model
          - other Cash Market instruments are currently not supported

        ## ETD portfolio as JSON array

        `etd_portfolio` instruments are specified either by full key  or by
        technical `iid`. The technical `iid` takes precedence if both keys are
        sent. The position always needs `line_no` and `net_ls_balance`.

        The full key for series depends on instrument type, these are the
        mandatory fields:

        - Future: `product`, `contract_date` as YYYYMMDD, `version_number`
        (defaults to 0)

        - Option: `product`, `contract_date` as YYYYMMDD, `call_put_flag`,
        `exercise_price`, `version_number` (defaults to 0)

        - Flex Future: `instrument_type`: "Flex Future", `product`,
        `contract_date` as YYYYMMDD, `version_number` (defaults to 0)

        - Flex Option: `instrument_type`: "Flex Option", `product`,
        `contract_date` as YYYYMMDD, `call_put_flag`, `exercise_price`,
        `exercise_style`, `version_number` (defaults to 0)


        Only already existing Flex Future or Flex Option can be submitted, not a
        new one (e.g. different strike or expiry day).

        For backward compatibility `maturity` as YYYYMM (DD added for flex) can
        be used instead of `contract_date`, however it is not recommended as
        uniqueness is not guaranteed.

        Example of minimal request with one future contract:


        <pre> curl --header 'X-DBP-APIKEY: your-key' \
          https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/estimator \
          -d '{"portfolio_components":[{"type":"etd_portfolio","etd_portfolio":[{"line_no":1,"product_id":"FEXD","contract_date":20301220,"net_ls_balance":1}]}]}'
        </pre>


        ## OTC CSV format

        The CSV describing all trades is submitted as one string in `csv`
        attribute of `otc_csv` structure starting with header. Lines separated
        by `\n`.

        One line contains all information for one trade, including both its
        legs. All columns must be present, although some can be empty. Mandatory
        columns are marked by asterisk *. For certain trade types, even some
        optional columns must be filled, see the description. If unsure about
        possible combinations of attribute values please refer to
          [EurexOTC Clear IRS Product List](https://www.eurexclearing.com/resource/blob/227404/ff4638f2a3bfedbf511868ef54c6a153/data/ec15075e_Attach.pdf)
          or the [OTC template description](https://github.com/Deutsche-Boerse-Risk/CloudPrismaMarginEstimator/raw/master/templates/otc/OTC_template_description.xls).


        ### Basic OTC trade attributes

        - internalTradeID*: id of the trade to distinguish it in drilldown, must
        be unique

        - tradeType*: IRS, Basis swap, OIS, FRA, VNS, ZCIS

        - currency*: ISO code of currency, e.g. EUR, CHF, USD, GBP

        - effectiveDate*: effective date as DD/MM/YYYY, e.g. 20/12/2018

        - terminationDate*: termination date as DD/MM/YYYY, e.g. 20/12/2028


        ### Pay leg attributes

        - payLegType*: fixedLeg or floatingLeg

        - payLegSpread: rate for fixedLeg in %, or spread (optional) for
        floatingLeg in bp

        - payLegIndex: index for floatingLeg, if empty, default index for the
        currency is selected

        - payInterestFixedAmount: allowed for fixedLeg only, lump sum paid at
        maturity of zero coupon swap

        - payNotional*: notional

        - payPaymentPeriod*: 1M, 3M, 6M, 12M, 1Y, 1T (for zero-coupon);
        inflation swaps always use 1T no matter what period is given

        - payPeriodStartVNS: fill only for VNS

        - payCompounding: fill only for compounding swap, Flat or Straight

        - payCompoundingIndexPeriod: period for compounding swap, 1M, 3M, 6M,
        12M, 1Y

        - payStub: fill only if the leg has a stub, LongFinal, LongInitial,
        ShortInitial, ShortFinal

        - payFirstRate: first pre-defined rate

        - payFirstInterpolationTenor: stub interpolation tenor for floatingLeg,
        1W, 1M, 3M, 6M, ...

        - paySecondInterpolationTenor: stub interpolation tenor for floatingLeg,
        1W, 1M, 3M, 6M, ...

        - payDayCountMethod*: 30/360, 30E/360, 30E/360.ISDA, ACT/360,
        ACT/365.FIXED, ACT/ACT.ISDA, ACT/365.ISDA, ACT/ACT.ICMA, ACT/ACT.ISMA,
        1/1, ...

        - payBusinessDayConvention: MODFOLLOWING, FOLLOWING, PRECEDING, ...

        - payPaymentCalendar: EUTA, CHZU, GBLO, USNY, DEFR, ITMI, FRPA, ESMA,
        BEBR, JPTO, DKCO, NOOS, SEST, PLWA, ... calendars can be combined with
        "+"; unknown calendar is ignored

        - payAdjustment: ADJUSTED, UNADJUSTED, MAT_UNADJUSTED, ...

        - payRollMethod: Standard, IMM, EOM, ...


        ### Receive leg attributes

        The receive leg has the same attributes as pay leg above, except prefix
        "pay" is replaced by "rcv".

        ## OTC sensitivities in CSV format

        The whole portfolio is described by a table of DV01 sensitivities,
        submitted in CSV format known from Margin Calculator. The columns are
        curves and rows maturities - see the example in request model.

        ## OTC reports CB202, CB207

        See Eurex OTC member documentation for CB202 and CB207 reports. Only
        positions from one specified account or risk netting unit (ARNU) will be
        evaluated, see the attributes of `otc_cb202` structure below. We
        recommend using gzip compression in the request, see above.

        ## OTC FpML

        See the public definition for FpML format. It is submitted as
        `otc_fpml`. The `party` attribute is mandatory, see below. We recommend
        using gzip compression in the request, see above.

        ## Repo JSON

        `portfolio_components/repo_json` defines special Repo (single-ISIN Repo)
        positions. For attribute details see the model below.

        # What-If analysis

        Estimator request allows to perform what-if analysis for ETD and OTC,
        i.e. it answers the question what would be the portfolio margin when
        a set of positions or trades is added to a base portfolio. The added trades
        are submitted a separate portfolio component(s) marked by non-zero `whatif_id`.
        Multiple scenarios (different sets of trades to add) can be tested with one request,
        the scenarios are distinguished by `whatif_id`.


        Results for the base portfolio are returned in portfolio_margin as for standard request.
        Portfolio margins for the scenarios are returned in array `whatif_portfolio_margin`.
        They are total margins for the base portfolio plus the added trades. To learn
        the margin increase or decrease caused by the added trades, subtract margin
        of the base portfolio from the what-if portfolio margin. Drilldowns are returned
        only for the base portfolio.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        required: true
        content:
          application/json:
            example:
              portfolio_components:
                - type: etd_portfolio
                  etd_portfolio:
                    - line_no: 1
                      product_id: FEXD
                      contract_date: 20301220
                      net_ls_balance: 10
                    - line_no: 2
                      product_id: OESD
                      contract_date: 20311222
                      call_put_flag: C
                      exercise_price: 90
                      net_ls_balance: -10
            schema:
              type: object
              properties:
                snapshot:
                  $ref: '#/components/schemas/snapshot'
                clearing_currency:
                  $ref: '#/components/schemas/clearing_currency'
                is_cross_margined:
                  type: boolean
                  description: enable cross-margining between OTC and Fixed Income
                  example: true
                simulated_settlement_date:
                  $ref: '#/components/schemas/simulated_settlement_date'
                portfolio_components:
                  type: array
                  description: array of portfolio components
                  items:
                    type: object
                    description: >-
                      one portfolio component, only type and one structure
                      relevant for the type is filled
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        description: type of this component
                        example: etd_portfolio
                        enum:
                          - etd_portfolio
                          - etd_csv
                          - etd_cp005
                          - otc_csv
                          - otc_sensitivities
                          - otc_cb202
                          - otc_cc233
                          - otc_fpml
                          - cash_json
                          - cash_csv
                          - repo_json
                      etd_portfolio:
                        $ref: '#/components/schemas/etd_portfolio'
                      etd_csv:
                        $ref: '#/components/schemas/etd_csv'
                      etd_cp005:
                        $ref: '#/components/schemas/etd_cp005'
                      otc_csv:
                        $ref: '#/components/schemas/otc_csv'
                      otc_sensitivities:
                        $ref: '#/components/schemas/otc_sensitivities'
                      otc_cb202:
                        $ref: '#/components/schemas/otc_cb202'
                      otc_cc233:
                        $ref: '#/components/schemas/otc_cc233'
                      otc_fpml:
                        $ref: '#/components/schemas/otc_fpml'
                      cash_json:
                        $ref: '#/components/schemas/cash_json'
                      cash_csv:
                        $ref: '#/components/schemas/cash_csv'
                      repo_json:
                        $ref: '#/components/schemas/repo_json'
                      whatif_id:
                        $ref: '#/components/schemas/whatif_id'
              required:
                - portfolio_components 
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                clearing_currency: EUR
                errors:
                  - line_no: 2
                    portfolio: ETD
                    error_msg: 'Line 1 instrument iid not recognized: 736947'
                portfolio_margin:
                  - liquidation_group: PEQ01
                    liquidation_group_split: PFI01_HP2_T0-99999
                    initial_margin: 3161.708587
                    market_risk: 3155.266149
                    liquidity_addon: 6.442439
                    long_option_credit: 0
                    time_to_expiry_adjustment: 0
                    premium_margin: 0
                    market_risk_per_rms:
                      - rms_name: FILTERED_HISTORICAL_VAR_2
                        simulation_type: Historical
                        rms_market_risk: 4991.692879
                        weighting_factor: 0.51
                        rms_components:
                          - subsample_id: 1
                            risk_measure_value: 4481.692879
                            correlation_break_adjustment: 500
                            compression_adjustment: 10
                rbm_margin:
                  margin_classes:
                    - margin_class_code: DB10
                      margin_group_code: null
                      margin_parameter: 5.5
                      margin_parameter_flag: P
                      cash_interest_rate: -0.566
                      additional_margin: 1026812
                      additional_margin_before_grouping: 1026812
                      current_liquidating_margin: 851977
                      margin_class_currency: EUR
                      positions:
                        - line_no: 1
                          sec_isin: DE0005810055
                          sec_name: DEUTSCHE BOERSE AG
                          settlement_date: 20210312
                          net_security_position: 64100
                          net_cash_position: -10310484
                          amount_clv_secu: 62100
                          amount_clv_cash: -10310484
                          current_liquidating_margin: 851977
                    - margin_class_code: C004I
                      margin_group_code: null
                      margin_parameter: 2.35
                      margin_parameter_flag: P
                      cash_interest_rate: 0.02
                      additional_margin: 6
                      additional_margin_before_grouping: 6
                      current_liquidating_margin: -9592
                      margin_class_currency: USD
                      positions:
                        - line_no: 2
                          sec_isin: US240718A929
                          sec_name: null
                          settlement_date: 20210312
                          net_security_position: -1066
                          net_cash_position: 10661
                          amount_clv_secu: 10680
                          amount_clv_cash: 10661
                          current_liquidating_margin: -9592
                drilldowns:
                  - line_no: 1
                    product_id: OEXD
                    call_put_flag: C
                    exercise_price: 90
                    version_number: '0'
                    iid: 18249016
                    contract_date: 20311222
                    maturity: 203112
                    net_ls_balance: 10
                    liquidation_group: PFI01
                    liquidation_group_split: PFI01_HP2_T0-99999
                    component_margin: 2382.083819
                    component_margin_currency: EUR
                    premium_margin: 0
                    premium_margin_currency: EUR
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  clearing_currency:
                    $ref: '#/components/schemas/clearing_currency'
                  error:
                    $ref: '#/components/schemas/error'                    
                  errors:
                    $ref: '#/components/schemas/errors'
                  portfolio_margin:
                    $ref: '#/components/schemas/portfolio_margin'
                  rbm_margin:
                    $ref: '#/components/schemas/rbm_margin'
                  what_if_portfolio_margin:
                    $ref: '#/components/schemas/whatif_portfolio_margin'
                  drilldowns:
                    $ref: '#/components/schemas/etd_positions'
                  otc_drilldowns:
                    $ref: '#/components/schemas/otc_drilldowns'


  /otc_trade_details:
    post:
      summary: OTC Trade Details
      description: >-
        Return a short human-readable description of OTC trade, e.g. to display
        on a GUI. The description is not complete, i.e. it is not sufficient to
        evaluate the trade.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            example:
              portfolio_components:
                - type: otc_csv
                  otc_csv:
                    csv: >-
                      internalTradeID,tradeType,currency,effectiveDate,terminationDate,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod\n1,FRA,EUR,20/12/2018,20/08/2019,fixedLeg,0.15,,,100000000,3M,,,,,,,,ACT/360,,,,,floatingLeg,,,,100000000,3M,,,,,,,,ACT/360,,,,
            schema:
              type: object
              properties:
                snapshot:
                  $ref: '#/components/schemas/snapshot'
                portfolio_components:
                  type: array
                  description: array of portfolio components
                  items:
                    type: object
                    description: >-
                      one portfolio component, only type and one structure
                      relevant for the type is filled
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        description: type of this component
                        example: etd_portfolio
                      otc_csv:
                        $ref: '#/components/schemas/otc_csv'
                      otc_cb202:
                        $ref: '#/components/schemas/otc_cb202'
                      otc_fpml:
                        $ref: '#/components/schemas/otc_fpml'
              required:
                - portfolio_components 
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                otc_trade_details:
                  - trade_id: '1'
                    type: FRA
                    pay: Fixed 0.15%
                    receive: EUR-EURIBOR-3M
                    notional: 100000000
                    notional_currency: EUR
                    maturity: 0.8Y
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  otc_trade_details:
                    $ref: '#/components/schemas/otc_trade_details'
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'

  /otc_sensitivities:
    post:
      summary: OTC Sensitivities
      description: >-
        Return a table of DV01 (delta) sensitivities of OTC portfolio, per curve
        and maturity bucket. The sensitivity table is accepted as
        `otc_sensitivities` input for POST `/estimator` request and can be used
        instead of the whole OTC portfolio for faster margin computation.
      externalDocs:
        url: >-
          https://github.com/Deutsche-Boerse-Risk/CloudPrismaMarginEstimator/raw/master/templates/otc/OTC_sensitivities_template.xlsm
        description: Example of the DV01 Sensitivities table as Excel sheet
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            example:
              portfolio_components:
                - type: otc_csv
                  otc_csv:
                    csv: >-
                      internalTradeID,tradeType,currency,effectiveDate,terminationDate,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod\n1,FRA,EUR,20/12/2018,20/08/2019,fixedLeg,0.15,,,100000000,3M,,,,,,,,ACT/360,,,,,floatingLeg,,,,100000000,3M,,,,,,,,ACT/360,,,,
            schema:
              type: object
              properties:
                snapshot:
                  $ref: '#/components/schemas/snapshot'
                portfolio_components:
                  type: array
                  description: array of portfolio components
                  items:
                    type: object
                    description: >-
                      one portfolio component, only type and one structure
                      relevant for the type is filled
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        description: type of this component
                        example: otc_csv
                      otc_csv:
                        $ref: '#/components/schemas/otc_csv'
                      otc_cb202:
                        $ref: '#/components/schemas/otc_cb202'
                      otc_cc233:
                        $ref: '#/components/schemas/otc_cc233'
                      otc_fpml:
                        $ref: '#/components/schemas/otc_fpml'
              required:
                - portfolio_components 
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                curves:
                  - EUR.ESTR
                dv01_per_maturity:
                  - maturity: 'ON'
                    dv01:
                      - 123.456
                csv: Maturity,EUR.ESTR\nON,123.456
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  curves:
                    type: array
                    items:
                      type: string
                      description: name of a interest rate curve
                      example: EUR.EURIBOR.1M
                  dv01_per_maturity:
                    type: array
                    items:
                      type: object
                      description: >-
                        DV01 for different curves of one maturity
                        $primary_keys(maturity)
                      properties:
                        maturity:
                          $ref: '#/components/schemas/otc_maturity'
                        dv01:
                          type: array
                          items:
                            type: number
                            example: -284.4
                  csv:
                    type: string
                    description: >-
                      the DV01 table as one string in format that can be
                      directly submitted to margin estimation
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'

  /greeks:
    post:
      summary: Greek Calculation Request
      description: >-
        Calculate analytical greeks (sensitivities) for given exchange traded
        instruments. The instruments are specified by a technical `iid` that can
        be obtained by `series` query. Two types of greeks are offered:

        - numerical derivative of change in instrument price in product currency
        w.r.t. change in given variable, e.g. DELTA is w.r.t. change in
        underlying price

        - the above greek converted to EUR:
          - EURO_DELTA, EURO_GAMMA: (_underlying price_ + _price offset_) \* _greek_ \* _fx conversion to EUR_
          - EURO_RHO, EURO_THETA, EURO_VEGA: _greek_ \* _fx conversion to EUR_

        Optionally, vector of relative underlying shifts can be supplied to
        calculate stress greeks (except DV01, there shifts are ignored) in
        scenarios where underlying price moved. Note that the method of
        calculation is slightly different, therefore the result for request
        without shift may differ from result with zero shift.


        To get a position greek, the instrument greek has to be multiplied by
        position size and trade unit value (TUV).
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            example:
              greek_types:
                - EURO_DELTA
                - EURO_VEGA
              underlying_shifts_rel:
                - -0.01
                - 0.01
              iids:
                - 26807581
                - 27471356
            schema:
              type: object
              properties:
                snapshot:
                  $ref: '#/components/schemas/snapshot'
                greek_types:
                  $ref: '#/components/schemas/greek_types'
                underlying_shifts_rel:
                  $ref: '#/components/schemas/underlying_shifts_rel'
                iids:
                  $ref: '#/components/schemas/iids'
              required:
                - greek_types
                - iids
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                greek_types:
                  - EURO_DELTA
                underlying_shifts_rel:
                  - -0.01
                  - 0.01
                greeks:
                  - iid: 26807581
                    values:
                      - - 674
                        - 565
                  - iid: 27471356
                    values:
                      - - 0.65957
                        - 0.6809
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  greek_types:
                    $ref: '#/components/schemas/greek_types'
                  underlying_shifts_rel:
                    $ref: '#/components/schemas/underlying_shifts_rel'
                  greeks:
                    type: array
                    items:
                      type: object
                      description: >-
                        Array of arrays of greeks for given instrument per greek
                        type and per underlying shift rel, in the order given by
                        type and shift vectors
                        $primary_keys(iid)
                      properties:
                        iid:
                          $ref: '#/components/schemas/iid'
                        values:
                          type: array
                          items:
                            type: array
                            items:
                              type: number
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'

  /stressmatrix:
    post:
      summary: Stress Matrix Request
      description: >-
        Calculate theoretical prices of given exchange traded instruments in
        stressed scenarios. The scenario can have shifted underlying price
        and/or volatility. In one request, vector of underlying price shifts and
        volatility shifts is specified and the result then contains stress
        matrix with prices for each combination of the underlying price and
        volatility shift.

        ## Volatility Shift

        The volatility shift can be either relative or absolute. For example,
        when current volatility is 20%:

        - relative shift 0.1 means the stressed volatility is 20% \* (1+0.1) =
        22%
        - absolute shift 0.1 means stressed volatility is 20% + 0.1% = 20.1%

        For futures, volatility shift has no effect and the underlying price
        shift changes directly the future price, theoretical pricing model is
        not used.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            example:
              underlying_shifts_rel:
                - 0.01
              volatility_shifts:
                - -0.1
                - 0.1
              volatility_shift_type: ABSOLUTE
              iids:
                - 26807581
                - 27471356
            schema:
              type: object
              properties:
                snapshot:
                  $ref: '#/components/schemas/snapshot'
                underlying_shifts_rel:
                  $ref: '#/components/schemas/underlying_shifts_rel'
                volatility_shifts:
                  $ref: '#/components/schemas/volatility_shifts'
                volatility_shift_type:
                  $ref: '#/components/schemas/volatility_shift_type'
                iids:
                  $ref: '#/components/schemas/iids'
              required:
                - iids
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20180809
                live: false
                live_timestamp: 0
                underlying_shifts_rel:
                  - 0.01
                volatility_shifts:
                  - -0.1
                  - 0.1
                volatility_shift_type: RELATIVE
                stress_matrix:
                  - iid: 26807581
                    values:
                      - - 0.65957
                      - - 0.6809
                  - iid: 27471356
                    values:
                      - - 0.65957
                      - - 0.6809
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  underlying_shifts_rel:
                    $ref: '#/components/schemas/underlying_shifts_rel'
                  volatility_shifts:
                    $ref: '#/components/schemas/volatility_shifts'
                  volatility_shift_type:
                    $ref: '#/components/schemas/volatility_shift_type'
                  stress_matrix:
                    type: array
                    items:
                      type: object
                      description: >-
                        Array of arrays of prices for given instrument per
                        underlying price shift and volatility shift, in the
                        order given by price and vola shift vectors
                        $primary_keys(iid)
                      properties:
                        iid:
                          $ref: '#/components/schemas/iid'
                        values:
                          type: array
                          items:
                            type: array
                            items:
                              type: number
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'

  /convert/etd/cp005:
    post:
      summary: >-
        Convert Eurex ETD CP005 position report to JSON ETD representation for
        CPME
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  type: string
                  description: >-
                    optional attribute to process only positions of the member,
                    if not given the clearing member is used
                account:
                  type: string
                  description: >-
                    optional attribute to process only positions on that
                    account, if not given "PP" account is used
                xml:
                  type: string
                  description: exchange traded portfolio as Eurex report CP005
              required:
                - xml
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/etd_portfolio'

  /convert/otc/shorthand:
    post:
      summary: Convert a short text description of the trade to OTC CSV
      description: >-
        Text description of a trade similar to Clarus Quick Trade format is
        converted to OTC CSV representation that can be used for margin
        calculation. Response contains also trade details. The expected trade
        format is contains currency, notional, maturity, side and optionaly rate.
        E.g. "USD 200m 10Y pay 1.5%". When the rate is not given, CPME uses par-rate.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otc_shorthand_lines:
                  type: string
                  description: Text description of OTC trade(s), separated by newline
                  example: USD 200m 10Y pay 1.5%
              required:
                - otc_shorthand_lines
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'
                  otc_csv:
                    $ref: '#/components/schemas/otc_csv_string'
                  otc_trade_details:
                    $ref: '#/components/schemas/otc_trade_details'

  /convert/cash/csv:
    post:
      summary: >-
        Convert cash market portfolio in CSV format to JSON representation
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                csv:
                  $ref: '#/components/schemas/cash_csv'
              required:
                - csv
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cash_json'

  /indicative_margin:
    get:
      summary: Indicative margin for front month future contracts and selected OTC swaps
      description: >-
        ## ETD futures

        Get indicative margin for one future contract (front month contract of
        given future product) in EUR. By default all Eurex futures are included,
        unless ECC clearing house is selected or a specific product or products
        is requested.

        ## Results

        The resulting long_initial_margin_cash and short_initial_margin_cash is
        equivalent to the margin calculated by individual /estimator requests
        for portfolio of one long or short contract, respectively.


        The relative long_initial_margin and short_initial_margin is the cash
        margin divided by (current underlying price converted to EUR * trade
        unit value).

        ## OTC swaps

        When request specifies "OTC" market, the endpoint returns margin for
        a list of OTC swaps, the cash margin figures are for a swap
        with +/- 100000 EUR DV01 sensitivity. The relative figures
        are the cash margin figures divided by 100000.

        ## Snapshot

        Optionally business date can be specified to get historical indicative
        margins, by default CPME returns the most recent values. In contrast to
        estimator request, which uses end-of-day for historical calculation
        (unless time is specified), indicative margin is by default for the first live
        snapshot (published in the morning to indicate margin during the day).
        
        ## Time Range

        As an alternative to selecting one business_date, time series can be
        requested using business_date_from, business_date_to attributes.
        This is available only for JSON output format.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - name: market
          in: query
          description: >-
            The market for which indicative margin is required.
          required: false
          schema:
            type: string
            enum:
              - ETD
              - OTC
            default: ETD
        - name: clearing_house
          in: query
          description: >-
            Either EUXCDEFF (i.e. Eurex, the default choice) or EEXCDE8L (i.e.
            European Commodity Clearing, linked to EEX = European Energy
            Exchange).
          required: false
          schema:
            type: string
            enum:
              - EUXCDEFF
              - EEXCDE8L
            default: EUXCDEFF
        - name: products
          in: query
          description: >-
            Product ID of the future, there can be multiple instances of the
            parameter to request margin for several future products. If not
            provided the result will contain margin for all future products.
          required: false
          schema:
            type: string
        - name: format
          in: query
          description: >-
            Required result format, JSON (default), XLS or XLSX spreadsheet.
          required: false
          schema:
            type: string
            enum:
              - JSON
              - XLS
              - XLSX
            default: JSON
        - $ref: '#/components/parameters/business_date'
        - $ref: '#/components/parameters/business_date_from'
        - $ref: '#/components/parameters/business_date_to'
        - $ref: '#/components/parameters/live'
        - name: include_components
          in: query
          description: >-
            Include breakdown of the initial margin to market risk and other components.
            Also include details for market risk - results on risk measure set level.
            Available only in JSON format.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20210622
                live: false
                live_timestamp: 0
                list_margins:
                  - liquidation_group: PEQ01
                    product_id: DB1H
                    prod_name: FUT ON DT. BOERSE AG
                    margin_currency: EUR
                    long_initial_margin: 0.100004254
                    long_initial_margin_cash: 1479.062914
                    short_initial_margin: 0.11544631
                    short_initial_margin_cash: 1707.450925
                  - liquidation_group: PFI01
                    product_id: CHF_ON_5Y
                    prod_name: CHF SARON ON Swap 5Y
                    margin_currency: EUR
                    payer_initial_margin_per_dv01: 41.0
                    payer_initial_margin_cash: 4100000.0
                    payer_dv01: 96000.0
                    payer_dv01_eur: 100000.0
                    receiver_initial_margin_per_dv01: 39.0
                    receiver_initial_margin_cash: 3900000.0
                    receiver_dv01: -96000.0
                    receiver_dv01_eur: -100000.0
              schema:
                oneOf:
                  - $ref: '#/components/schemas/single_date_products_margin'
                  - type: array
                    description:  >-
                      array with indicative margins for a selected date range
                      $primary_keys(business_date,live_timestamp)
                    items:
                      $ref: '#/components/schemas/single_date_products_margin'
  
  /config/{param}:
    get:
      summary: Read configuration parameter
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
        - name: param
          in: path
          description: name of the parameter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                max_body_size: 262144000
              schema:
                type: object
                properties:
                  max_body_size:
                    type: number
                    description: maximum allowed body size of request in bytes

  /default_fund:
    post:
      summary: Approximate Calculation of Default Fund contribution
      description: >-
        Portfolio is sent in the request and Default Fund contribution is returned as a response.
        The request can contain exchange traded derivatives (ETD) portfolio, or Cash Market portfolio (equities, bonds, repos) or any combination of these assets:

        - ETD is submitted as
          - `etd_portfolio` JSON array, see request model
          - or `etd_csv` with positions in CSV format
          - or `etd_cp005`, i.e. using Eurex CP005 XML report

        - Cash Market is submitted as
          - `repo_json` JSON array of `repo_json_position` objects, see the model
          - `cash_json` JSON array of `cash_json_position` objects, see the model
          - or `cash_csv` with cash market positions in CSV format

        See the `/estimator` request for description of the input structures

        Example of minimal request with one future contract:


        <pre> curl --header 'X-DBP-APIKEY: your-key' \
          https://risk.developer.deutsche-boerse.com/prisma-margin-estimator-2-0-0/default_fund \
          -d '{"portfolio_components":[{"type":"etd_portfolio","etd_portfolio":[{"line_no":1,"product_id":"FEXD","contract_date":20301220,"net_ls_balance":1}]}]}'
        </pre>

      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      requestBody:
        required: true
        content:
          application/json:
            example:
              portfolio_components:
                - type: etd_portfolio
                  etd_portfolio:
                    - line_no: 1
                      product_id: FEXD
                      contract_date: 20301220
                      net_ls_balance: 10
                    - line_no: 2
                      product_id: OEXD
                      contract_date: 20311222
                      call_put_flag: C
                      exercise_price: 90
                      net_ls_balance: -10
            schema:
              type: object
              properties:
                clearing_currency:
                  $ref: '#/components/schemas/clearing_currency'
                is_cross_margined:
                  type: boolean
                  description: enable cross-margining between OTC and Fixed Income
                  example: true
                include_drilldowns:
                  type: boolean
                  description: include results on position level in the response
                  example: false
                  default: false
                portfolio_components:
                  type: array
                  description: array of portfolio components
                  items:
                    type: object
                    description: >-
                      one portfolio component, only type and one structure
                      relevant for the type is filled
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        description: type of this component
                        example: etd_portfolio
                        enum:
                          - etd_portfolio
                          - etd_csv
                          - etd_cp005
                          - otc_csv
                          - otc_sensitivities
                          - otc_cb202
                          - otc_cc233
                          - otc_fpml
                          - cash_json
                          - cash_csv
                          - repo_json
                      etd_portfolio:
                        $ref: '#/components/schemas/etd_portfolio'
                      etd_csv:
                        $ref: '#/components/schemas/etd_csv'
                      etd_cp005:
                        $ref: '#/components/schemas/etd_cp005'
                      otc_csv:
                        $ref: '#/components/schemas/otc_csv'
                      otc_sensitivities:
                        $ref: '#/components/schemas/otc_sensitivities'
                      otc_cb202:
                        $ref: '#/components/schemas/otc_cb202'
                      otc_cc233:
                        $ref: '#/components/schemas/otc_cc233'
                      otc_fpml:
                        $ref: '#/components/schemas/otc_fpml'
                      cash_json:
                        $ref: '#/components/schemas/cash_json'
                      cash_csv:
                        $ref: '#/components/schemas/cash_csv'
                      repo_json:
                        $ref: '#/components/schemas/repo_json'
              required:
                - portfolio_components 
      responses:
        '200':
          description: response from CPME API, can be error if "error" element or "errors" array is present, otherwise OK 
          content:
            application/json:
              example:
                business_date: 20220905
                live: false
                live_timestamp: 0
                clearing_currency: EUR
                errors:
                  - line_no: 2
                    portfolio: ETD
                    error_msg: 'Line 1 instrument iid not recognized: 736947'
                portfolio_margin:
                  - liquidation_group: PEQ01
                    liquidation_group_split: PFI01_HP2_T0-99999
                    initial_margin: 3161.708587
                    market_risk: 3155.266149
                    liquidity_addon: 6.442439
                    long_option_credit: 0
                    time_to_expiry_adjustment: 0
                    premium_margin: 0
                    market_risk_per_rms:
                      - rms_name: FILTERED_HISTORICAL_VAR_2
                        simulation_type: Historical
                        rms_market_risk: 4991.692879
                        weighting_factor: 0.51
                        rms_components:
                          - subsample_id: 1
                            risk_measure_value: 4481.692879
                            correlation_break_adjustment: 500
                            compression_adjustment: 10
                rbm_margin:
                  margin_classes:
                    - margin_class_code: DB10
                      margin_group_code: null
                      margin_parameter: 5.5
                      margin_parameter_flag: P
                      cash_interest_rate: -0.566
                      additional_margin: 1026812
                      additional_margin_before_grouping: 1026812
                      current_liquidating_margin: 851977
                      margin_class_currency: EUR
                      positions:
                        - line_no: 1
                          sec_isin: DE0005810055
                          sec_name: DEUTSCHE BOERSE AG
                          settlement_date: 20210312
                          net_security_position: 64100
                          net_cash_position: -10310484
                          amount_clv_secu: 62100
                          amount_clv_cash: -10310484
                          current_liquidating_margin: 851977
                default_fund_contribution:
                  worst_global_scenario: Lehman crash 15.09.2008
                  currency: EUR
                  stress_loss_over_margin: -101808201.00
                  default_fund_requirement: 16634756
                  slom_drilldown:
                    - global_scenario: Lehman crash 15.09.2008
                      stress_value: -107168880.00
                      total_margin_requirement: 5362113.00
                      stress_loss_over_margin: -101808201.00
                      slom_per_lg_mg:
                        - liquidation_group: PEQ01
                          margin_group_code:
                          stress_value_market_risk: 53.00
                          stress_value_liquidity_risk: -121.00
                          total_margin_requirement: 167539.00
                          stress_loss_over_margin: 167471.00
                          slom_per_lgs_mc:
                          - liquidation_group_split: "PEQ01_HP3"
                            margin_class_code:
                            stress_value_market_risk: 53.00
                            stress_value_liquidity_risk: -121.00
                            total_margin_requirement: 167539.00
                            stress_loss_over_margin: 167471.00
                            worst_system_scnid: 1475
                        - liquidation_group:
                          margin_group_code: "!DB10"
                          stress_value_market_risk: -107168880.00
                          stress_value_liquidity_risk: -1310.00
                          total_margin_requirement: 5194185.00
                          stress_loss_over_margin: -101976005.00
                          slom_per_lgs_mc:
                          - liquidation_group_split:
                            margin_class_code: DB10
                            stress_value_market_risk: -107168880.00
                            stress_value_liquidity_risk: -1310.00
                            total_margin_requirement: 5194185.00
                            stress_loss_over_margin: -101976005.00
                            worst_system_scnid: 449
                etd_positions:
                  - line_no: 1
                    product_id: OEXD
                    call_put_flag: C
                    exercise_price: 90
                    version_number: '0'
                    iid: 18249016
                    contract_date: 20311222
                    maturity: 203112
                    net_ls_balance: 10
                    liquidation_group: PEQ01
                    liquidation_group_split: PEQ01_HP3
                    stress_value_per_global_scenario:
                      - gscnid: 1
                        stress_value: 53.0
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  clearing_currency:
                    $ref: '#/components/schemas/clearing_currency'
                  error:
                    $ref: '#/components/schemas/error'
                  errors:
                    $ref: '#/components/schemas/errors'
                  portfolio_margin:
                    $ref: '#/components/schemas/portfolio_margin'
                  rbm_margin:
                    $ref: '#/components/schemas/rbm_margin'
                  default_fund_contribution:
                    $ref: '#/components/schemas/default_fund_contribution'
                  etd_positions:
                    $ref: '#/components/schemas/etd_positions_stress'
                  otc_trades:
                    $ref: '#/components/schemas/otc_trades_stress'

  /global_scenarios:
    get:
      summary: List global scenarios used by Default Fund Estimator
      description: >-
        The numerical id (gscnid) is used in `stress_value_per_global_scenario` array in POST `/default_fund` response.
      parameters:
        - $ref: '#/components/parameters/x_dbp_apikey'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                business_date: 20220912
                live: false
                live_timestamp: 0
                scenarios:
                  - global_scenario: Lehman crash 15.09.2008
                    gscnid: 1
              schema:
                type: object
                properties:
                  business_date:
                    $ref: '#/components/schemas/business_date'
                  live:
                    $ref: '#/components/schemas/live'
                  live_timestamp:
                    $ref: '#/components/schemas/live_timestamp'
                  scenarios:
                    type: array
                    items:
                      type: object
                      description: >-
                        $primary_keys(gscnid)
                      properties:
                        global_scenario:
                          $ref: '#/components/schemas/global_scenario'
                        gscnid:
                          $ref: '#/components/schemas/gscnid'


components:

  parameters:
    x_dbp_apikey:
      name: X-DBP-APIKEY
      in: header
      description: >-
        your key, obtain it by registering at [DBG Digital Business
        Platform](https://console.developer.deutsche-boerse.com/)
      schema:
        type: string
      required: true
    extrafields:
      name: extrafields
      in: query
      description: >-
        comma-separated list of optional fields that should be returned in
        addition to the default set of response fields. Alternatively can be
        specified also as multiple parameter instances instead of
        comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    business_date:
      name: business_date
      in: query
      schema:
        type: number
      description: Business date as of which the result is calculated, in YYYYMMDD format
    live:
      name: live
      in: query
      description: >-
        Is the snapshot live (a.k.a. intraday)? False for end-of-day.
      schema:
        type: boolean
    live_timestamp:
      name: live_timestamp
      in: query
      schema:
        type: number
      description: >-
        Timestamp as of which the result is calculated, in milliseconds from
        epoch. Zero means the first live snapshot.
    business_date_from:
      name: business_date_from
      in: query
      schema:
        type: number
      description: Start of a date range, in YYYYMMDD format
    business_date_to:
      name: business_date_to
      in: query
      schema:
        type: number
      description: End of a date range, in YYYYMMDD format


  schemas:

    business_date:
      type: number
      description: Business date as of which the result is calculated, in YYYYMMDD format
      example: 20181205
    live:
      type: boolean
      description: >-
        Is the snapshot live (a.k.a. intraday)? False for end-of-day.
        In request, False without any date means last end-of-day.
      example: false
    live_timestamp:
      type: number
      description: >-
        Timestamp as of which the result is calculated, in milliseconds from
        epoch. Zero means first live snapshot of the day.
      example: 0
    otc_available:
      type: boolean
      description: >-
        Is OTC available in the snapshot? Snapshot can exist without OTC, then
        only ETD portfolio can be evaluated. Snapshot without ETD is not
        possible. Live snapshots can be marked as otc_available which means OTC
        portfolio will be evaluated, however the OTC market data are from
        first live snapshot of the day, not from the particular timestamp.
      example: true
    cash_available:
      type: boolean
      description: >-
        Is Cash Market available in the snapshot? Cash Market was introduced
        later to CPME and is not available for earlier snapshots. Live snapshots
        can be marked as cash_available which means Repo portfolio will be
        evaluated, however the Cash Market market data are from the first live
        snapshot of the day, not from the particular timestamp.
    snapshot:
      type: object
      description: >-
        Optional point in time as of which the result is calculated. If only
        business_date is specified, latest snapshot from that business date is
        used. If only live=False is specified, last EOD is used. The timestamp
        is used only when live is true.
      properties:
        business_date:
          $ref: '#/components/schemas/business_date'
        live:
          $ref: '#/components/schemas/live'
        live_timestamp:
          $ref: '#/components/schemas/live_timestamp'
    clearing_currency:
      type: string
      description: currency code of the currency in which the result should be calculated
      default: EUR
      example: EUR
    product_id:
      type: string
      description: Unique identifier of a product
      example: OESX
    contract_date:
      type: number
      description: >-
        Contract date of the instrument in YYYYMMDD format. Introduced with Next
        Generation ETD contracts initiative as part of the series primary key.
        Maturity (meaning contract_maturity) can still be used alternatives to
        contract_date, however only contract_date guarantees uniqueness.
      example: 20281215
    contract_frequency:
      type: string
      enum:
        - MONTHLY
        - WEEKLY
        - DAILY
        - FLEX
        - END_OF_MONTH
      description: Contract frequency
      example: MONTHLY
    contract_maturity:
      type: number
      description: >-
        Maturity of the instrument in YYYYMM format. Corresponds to contract
        year/month as shown on Eurex webpage
      example: 202812
    expiry_maturity:
      type: number
      description: Internal value used by Prisma
      example: 202812
    call_put_flag:
      type: string
      enum:
        - C
        - P
        - ''
      description: Call or put flag for options. Empty for futures
      example: P
    exercise_price:
      type: number
      description: Exercise price for options, e.g. 10038.77. Empty for futures
      example: 2400
    version_number:
      type: string
      description: Version number. Valid for both options and futures
      example: '0'
      default: '0'
    iid:
      type: number
      description: >-
        Technical instrument ID. Needed for analytical requests - greeks, stress
        prices. If provided in request, all other key attributes are ignored
      example: 27471356
    currency:
      type: string
      description: currency code
      example: EUR
    sec_id:
      type: string
      description: security ticker, upto 4 characters, can be empty
      example: DB1
    sec_isin:
      type: string
      description: security ISIN, unique identifier, mandatory, upto 16 characters
      example: DE0005810055
    sec_type:
      type: string
      description: security type, internal categorization
      example: SAKT
    sec_name:
      type: string
      description: security name, can be empty
      example: DEUTSCHE BOERSE AG
    security_mnemonic:
      type: string
      description: security mnemonic, can be empty
      example: DB1
    standard_settlement_period:
      type: number
      description: standard settlement period in days
      example: 2
    price_unit:
      type: string
      enum:
        - ABSOLUTE
        - PERCENTAGE
      description: price unit, typically absolute for stocks and percentage for bonds
      example: ABSOLUTE
    security_subtype:
      type: string
      enum:
        - BOND
        - EQUITY
        - SUBSCRIPTION_RIGHT
      description: security subtype
      example: EQUITY
    basket_isin:
      type: boolean
      description: is the security GC-pooling basket ISIN?
      example: false
    margin_class_code:
      type: string
      description: margin class code, up to 5 characters
      example: DB10
    margin_group_code:
        type: string
        description: >-
          Margin group that the margin class is assigned to. Can be
          empty, that means no grouping
    line_no:
      type: number
      description: Line number, used when reporting errors or position-level results
      example: 1
    maturity:
      type: number
      description: >-
        Maturity of the instrument in YYYYMM or YYYYMMDD format. Day mandatory
        for flex. Corresponds to contract year/month as shown on Eurex webpage
      example: 202812
    instrument_type:
      type: string
      enum:
        - Future
        - Option
        - Flex Future
        - Flex Option
      description: Mandatory for flex, ignored otherwise
      example: Flex Option
    exercise_style:
      type: string
      enum:
        - EUROPEAN
        - AMERICAN
        - ''
      description: >-
        Exercise style for options. Mandatory for Flex Option, ignored for
        standard options - product setup used
      example: AMERICAN
    exercise_style_flag:
      type: string
      enum:
        - E
        - A
        - ''
      description: >-
        E for European, A for American, empty for futures; can differ from
        product exercise style for Flex Option
      example: A
    net_ea:
      type: number
      description: Exercised/Allocated minus Assigned/Notified balance
      example: 0
    net_ls_balance:
      type: number
      description: Long/short balance, negative for short
      example: -100
    etd_portfolio:
      type: array
      items:
        type: object
        properties:
          line_no:
            $ref: '#/components/schemas/line_no'
          product_id:
            $ref: '#/components/schemas/product_id'
          contract_date:
            $ref: '#/components/schemas/contract_date'
          maturity:
            $ref: '#/components/schemas/maturity'
          call_put_flag:
            $ref: '#/components/schemas/call_put_flag'
          exercise_price:
            $ref: '#/components/schemas/exercise_price'
          version_number:
            $ref: '#/components/schemas/version_number'
          iid:
            $ref: '#/components/schemas/iid'
          instrument_type:
            $ref: '#/components/schemas/instrument_type'
          exercise_style:
            $ref: '#/components/schemas/exercise_style'
          net_ea:
            $ref: '#/components/schemas/net_ea'
          net_ls_balance:
            $ref: '#/components/schemas/net_ls_balance'
        required:
          - line_no
          - net_ls_balance
    etd_csv:
      type: object
      properties:
        csv:
          type: string
          description: >-
            ETD portfolio as one string in CSV, in Margin Calculator GUI format
            or Margin Estimator GUI format
          example: Product ID,Contract Date,Version Number,Call Put Flag,Exercise Price,Net LS Balance\nFEXD,20311219,0,,,100\nOESX,20311219,0,C,5000,-100
      required:
        - csv
    etd_cp005:
      type: object
      properties:
        member:
          type: string
          description: >-
            optional attribute to process only positions of the member, if not
            given the clearing member is used
        account:
          type: string
          description: >-
            optional attribute to process only positions on that account, if not
            given "PP" account is used
        xml:
          type: string
          description: exchange traded portfolio as Eurex report CP005
      required:
        - xml
    otc_csv:
      type: object
      properties:
        csv:
          $ref: '#/components/schemas/otc_csv_string'
      required:
        - csv
    
    market_risk:
      type: number
      description: Market risk from ReportCP046
    liquidity_addon:
      type: number
      description: Liqu risk from ReportCP046
    long_option_credit:
      type: number
      description: Long option credit from ReportCP046
    time_to_expiry_adjustment:
      type: number
      description: >-
        Time to Expiry Adjustment a.k.a. TEA from ReportCP046, introduced with Prisma R8.0
    rms_name:
      type: string
      description: Risk Measure Set name
    simulation_type:
      type: string
      enum:
        - Historical
        - Stress
        - Event
      description: Risk Measure Set type
    rms_market_risk:
      type: number
      description: RMS market risk before weighting
    weighting_factor:
      type: number
      description: RMS weighting factor to be applied before aggregation to LGS level
    risk_measure_value:
      type: number
      description: >-
        the main risk measure value for this RMS, e.g.
        value-at-risk for Historical or Stress simulation_type
    correlation_break_adjustment:
      type: number
      description: Correlation Break Adjustment for this RMS
    compression_adjustment:
      type: number
      description: Compression Adjustment for this RMS

    portfolio_margin:
      type: array
      description: >-
        Margin on LGS level, higher levels can be summed on UI. Also initial
        margin can be calculated as a sum of all components except premium
        margin
        $primary_keys(liquidation_group,liquidation_group_split)
      items:
        type: object
        properties:
          liquidation_group:
            $ref: '#/components/schemas/liquidation_group'
          liquidation_group_split:
            $ref: '#/components/schemas/liquidation_group_split'
          initial_margin:
            type: number
            description: >-
              Initial margin on liquidation group split level, equals to market
              risk plus add ons
          market_risk:
            $ref: '#/components/schemas/market_risk'
          liquidity_addon:
            $ref: '#/components/schemas/liquidity_addon'
          long_option_credit:
            $ref: '#/components/schemas/long_option_credit'
          time_to_expiry_adjustment:
            $ref: '#/components/schemas/time_to_expiry_adjustment'
          premium_margin:
            type: number
            description: Premium margin from ReportCP046
          market_risk_per_rms:
            type: array
            items:
              type: object
              description: $primary_keys(rms_name)
              properties:
                rms_name:
                  $ref: '#/components/schemas/rms_name'
                simulation_type:
                  $ref: '#/components/schemas/simulation_type'
                rms_market_risk:
                  $ref: '#/components/schemas/rms_market_risk'
                weighting_factor:
                  $ref: '#/components/schemas/weighting_factor'
                rms_components:
                  type: array
                  items:
                    type: object
                    description: $primary_keys(subsample_id)
                    properties:
                      subsample_id:
                        type: number
                        description: >-
                          id of the subsample (from 1 to risk horizon), or 1 if
                          the RMS is not using subsampling
                      risk_measure_value:
                        $ref: '#/components/schemas/risk_measure_value'
                      correlation_break_adjustment:
                        $ref: '#/components/schemas/correlation_break_adjustment'
                      compression_adjustment:
                        $ref: '#/components/schemas/compression_adjustment'

    im_components:
      type: object
      description: breakdown of initial margin to components
      properties:
        market_risk:
          $ref: '#/components/schemas/market_risk'
        liquidity_addon:
          $ref: '#/components/schemas/liquidity_addon'
        long_option_credit:
          $ref: '#/components/schemas/long_option_credit'
        time_to_expiry_adjustment:
          $ref: '#/components/schemas/time_to_expiry_adjustment'
        market_risk_per_rms:
          type: array
          description: list of risk measure sets that were used to determine market risk
          items:
            type: object
            description: >-
              breakdown for a particular risk measure set
              if the risk measure sets has multiple subsamples (obsolete), return mean value
              $primary_keys(rms_name)
            properties:
              rms_name:
                $ref: '#/components/schemas/rms_name'
              simulation_type:
                $ref: '#/components/schemas/simulation_type'
              weighting_factor:
                $ref: '#/components/schemas/weighting_factor'
              rms_market_risk:
                $ref: '#/components/schemas/rms_market_risk'
              risk_measure_value:
                $ref: '#/components/schemas/risk_measure_value'
              correlation_break_adjustment:
                $ref: '#/components/schemas/correlation_break_adjustment'
              compression_adjustment:
                $ref: '#/components/schemas/compression_adjustment'

    product_margin_long_short:
      type: object
      description: >-
        indicative margin for one product, long or short position
        $primary_keys(product_id)
      properties:
        liquidation_group:
          $ref: '#/components/schemas/liquidation_group'
        product_id:
          $ref: '#/components/schemas/product_id'
        prod_name:
          type: string
        margin_currency:
          $ref: '#/components/schemas/currency'
        long_initial_margin:
          type: number
        long_initial_margin_cash:
          type: number
        short_initial_margin:
          type: number
        short_initial_margin_cash:
          type: number
        im_components_long:
          $ref: '#/components/schemas/im_components'
        im_components_short:
          $ref: '#/components/schemas/im_components'

    single_date_products_margin:
      type: object
      description: indicative margin for one date
      properties:
        business_date:
          $ref: '#/components/schemas/business_date'
        live:
          $ref: '#/components/schemas/live'
        live_timestamp:
          $ref: '#/components/schemas/live_timestamp'
        list_margins:
          type: array
          description: >-
            indicative margins per product
            $primary_keys(product_id,liquidation_group)
          items:
            oneOf:
              - $ref: '#/components/schemas/product_margin_long_short'
              - $ref: '#/components/schemas/otc_product_indicative_margin'

    whatif_id:
      type: number
      description: id of the what-if scenario - marks the portfolio components that should be part of the scenario (on top on the base portfolio components, which are not labeled by whatif_id or have whatif_id=0) and marks the resulting portfolio margin for the scenario
      example: 1
      default: 0

    whatif_portfolio_margin:
      type: array
      description: >-
        array of portfolio margins for what-if scenarios. Sent only if any portfolio component was marked with non-zero whatif_id in the estimator request
        $primary_keys(whatif_id)
      items:
        type: object
        properties:
          whatif_id:
            $ref: '#/components/schemas/whatif_id'
          portfolio_margin:
            $ref: '#/components/schemas/portfolio_margin'

    otc_csv_string:
      type: string
      description: >-
        OTC portfolio as one string in CSV, format known from Margin Calculator
        GUI
      example: >-
        internalTradeID,tradeType,currency,effectiveDate,terminationDate,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod,legType,legSpread,legIndex,interestFixedAmount,notional,paymentPeriod,periodStartVNS,compounding,compoundingIndexPeriod,stub,firstRate,firstInterpolationTenor,secondInterpolationTenor,dayCountMethod,businessDayConvention,paymentCalendar,adjustment,rollMethod\n1,FRA,EUR,20/12/2018,20/08/2019,fixedLeg,0.15,,,100000000,3M,,,,,,,,ACT/360,,,,,floatingLeg,,,,100000000,3M,,,,,,,,ACT/360,,,,
    otc_cb202:
      type: object
      properties:
        member:
          type: string
          description: optional, will be matched against RC tag
        account:
          type: string
          description: >-
            optional, will be matched against acctTypGrp tag or riskNettingUnit
            tag, if not given P account is assumed
          default: P
        legal_entity:
          type: string
          description: optional, will be matched against srcSysLEId tag
        xml:
          type: string
          description: >-
            EurexOTC report CB202 or report CB207 describing trades as a single
            string
      required:
        - xml
    otc_cc233:
      type: object
      description: EurexOTC CC233 report with information which member/account should be selected from the report
      properties:
        member:
          type: string
          description: >-
            select member whose trades should be processed
            it is matched against the first part of Book column, e.g. "XYZFR" in "XYZFR_A1"
            example: XYZFR
        account:
          type: string
          description: >-
            select account of the `member`
            it is matched against the second part of Book column, e.g. "A1" in "XYZFR_A1"
            example: A1
        csv:
          type: string
          description: EurexOTC CC233 OTC Sensitivities report as one string, linebreaks replaced by `\n`
          example: "Value Date: 2021-05-31\nBook,TradeID,TradeStatus,MaturityDate,ProductType,ExtendedProductType,TradeCurrency,Principal,PrincipalAmountPay,PrincipalAmountRec,ProductDescription,FinalReferenceDate,MarketDataItem,CurveType,CurveTenor,Bucket,DeltaSensitivity,Risk_Netting_Unit\nXYZFR_A1,1,VERIFIED,23/04/2032,Swap,Swap,EUR,2500000,2500000,2500000,Swap/04/23/2032/P:EUR 0.03000 /R:EUR/EURIBOR/6M,,DIS EUR ESTR ZC OFFICIAL,CurveZero,1D,3Y,2.03,"
      required:
        - member
        - account
        - csv
    otc_fpml:
      type: object
      properties:
        party:
          type: string
          description: matched against partyId tag
        xml:
          type: string
          description: FpML describing trades as a single string
      required:
        - party
        - xml
    otc_sensitivities:
      type: object
      description: >-
        Table of DV01 sensitivities (a.k.a. deltas) of the OTC portfolio. There
        can be only one component of this type as input for margin calculation.
      properties:
        csv:
          type: string
          description: >-
            aggregated sensitivities in CSV format known from Margin Calculator
            GUI, as a single string. Example shows the full header row with
            curves and one row for 1M maturity. Supported maturities are 1M to
            11M, 1Y, 15M, 18M, 21M, 2Y to 12Y, 15Y, 20Y, 25Y, 30Y, 40Y, 50Y
          example: >-
            Maturity,CHF.SARON.ON,DKK.CIBOR.6M,EUR.ESTR.ON,EUR.EURIBOR.1M,EUR.EURIBOR.1Y,EUR.EURIBOR.3M,EUR.EURIBOR.6M,GBP.SONIA.ON,JPY.TONAR.ON,NOK.NIBOR.6M,PLN.WIBOR.6M,SEK.STIBOR.3M,USD.SOFR.ON\n1M,100,,,,,,,,,,,,
      required:
        - csv
    otc_trade_details:
      type: array
      items:
        type: object
        description: >-
          details of one OTC trade
          $primary_keys(trade_id)
        properties:
          trade_id:
            $ref: '#/components/schemas/trade_id'
          type:
            $ref: '#/components/schemas/otc_type'
          pay:
            $ref: '#/components/schemas/pay'
          receive:
            $ref: '#/components/schemas/receive'
          notional:
            $ref: '#/components/schemas/notional'
          notional_currency:
            $ref: '#/components/schemas/notional_currency'
          maturity:
            $ref: '#/components/schemas/otc_maturity'
    repo_json:
      type: array
      description: >-
        $primary_keys(line_no)
      items:
        $ref: '#/components/schemas/repo_json_position'
    repo_json_position:
      type: object
      description: >-
        Special Repo, also called single-ISIN Repo position (as opposed to
        GC-Pooling Repo).
      properties:
        line_no:
          $ref: '#/components/schemas/line_no'
        sec_isin:
          $ref: '#/components/schemas/sec_isin'
        trade_date:
          type: string
          description: Trade date as YYYY-MM-DD or YYYYMMDD, mandatory
          example: 20210315
        settlement_date_frontleg:
          type: string
          description: >-
            Settlement date for the front leg as YYYY-MM-DD or YYYYMMDD,
            mandatory
          example: 20210316
        settlement_date_termleg:
          type: string
          description: >-
            Settlement date for the term leg as YYYY-MM-DD or YYYYMMDD,
            can be empty for open repo
          example: 20210413
        buy_sell_indicator:
          type: string
          enum:
            - BUY
            - SELL
          description: >-
            mandatory, SELL = Sell securities, Cash taker; BUY = Buy securities,
            Cash Provider
          example: BUY
        currency:
          type: string
          description: >-
            Currency code for the Repo currency, optional, if filled it is
            validated that it is equal to currency of the ISIN
          example: EUR
        nominal:
          type: number
          description: Nominal value, mandatory
          example: 500000000
        fixed_repo_rate:
          type: number
          description: Fixed repo rate, in percent, either fixed_repo_rate or offset_bps must be specified
          example: 2.25
        offset_bps:
          type: number
          description: Offset of variable repo rate against risk-free rate, in basis points, either fixed_repo_rate or offset_bps must be specified
          example:
        trade_id:
          type: string
          description: user defined trade Id, optional
          example: ABC123
        clean_price_shift:
          type: number
          description: absolute shift of the risk system clean price, optional
          example: -1
      required:
        - line_no
        - sec_isin
        - trade_date
        - settlement_date_frontleg
        - buy_sell_indicator
        - nominal
    simulated_settlement_date:
      type: number
      description: >-
        date as YYYYMMDD, optional and relevant only for Repos. If provided it
        must be greater than the snapshot date and CPME will calculate margin as
        if the number of calendar days between snapshot date and simulated
        settlement date has passed. If any Repo legs have settlement date before
        simulated settlement date, they will be considered as settled. Market
        data are taken from the snapshot date (the simulated settlement date can
        be in future).
    additional_margin:
      type: number
      description: >-
        Forward looking margin component for cash market, including margin
        grouping effect
    additional_margin_before_grouping:
      type: number
      description: >-
        Forward looking margin component for cash market, as if there was no
        margin grouping
    current_liquidating_margin:
      type: number
      description: Current liquidating margin for cash market, covering current loss
    settlement_date:
      type: number
      description: Settlement date as YYYYMMDD, mandatory
      example: 20210312

    cash_json:
      type: array
      description: >-
        $primary_keys(line_no,leg_type)
      items:
        $ref: '#/components/schemas/cash_json_position'

    cash_json_position:
      type: object
      description: >-
        Cash Market position - bond, equity, subscription right (security positions, SP)
        or even pure cash position (CP). Some columns are relevant only for one type of record

        - Security Quantity, Gross Amounts, Source and CCP Trade Number for SP
        - Cash Position Type for CP

        For the security positions, users have option to enter

        - either Payable Cash Amount
        - or Traded Price (which is then used by CPME to calculate the Payable Cash Amount)

      properties:
        line_no:
          $ref: '#/components/schemas/line_no'
        sec_isin:
          $ref: '#/components/schemas/sec_isin'
        settlement_date:
          $ref: '#/components/schemas/settlement_date'
        settlement_currency:
          type: string
          description: Settlement currency code, optional, used for GC pooling positions only, defaults to currency from Security
          example: EUR
        payable_cash_amount:
          type: number
          description: Payable cash amount, mandatory for leg_type S or C, otherwise empty
          example: 1000
        traded_price:
          type: number
          description: Traded price as alternative to payable_cash_amount, mandatory for empty leg_type, otherwise empty
          example: 100
        security_quantity:
          type: number
          description: Number of units bought (positive) or sold (negative), if leg_type is S or empty then mandatory, otherwise empty
          example: -10
        ccp_trade_mumber:
          type: number
          description: CCP trade number, Used as a flag, empty=net position, non-empty=gross trade, optional
          default: 0
        leg_type:
          type: string
          enum: [ 'C','S','' ]
          description: Indicates whether the line is cash position or security position. C for cash, S for security with Payable Cash Amount, empty security with Traded Price. Unless you are familiar with DBG Risk representation of cash market positions, use empty leg type.

    cash_csv:
      type: object
      properties:
        csv:
          type: string
          description: >-
            Cash market portfolio in a CSV format, first row is header and following rows are positions,
            also called "settlements" as from risk point of view cash market position is relevant only during settlement.
            The rows are separated by `\n` in the string, line breaks are not allowed inside JSON values.
            The columns correspond to the attributes of `cash_json_position` object.
          example: Security ISIN,Settlement Date,Settlement Currency,Payable Cash Amount,Traded Price,Security Quantity,CCP Trade Number,Leg Type\nDE0005810055,20220630,,,100.23,100,,
      required:
        - csv
    rbm_margin:
      type: object
      description: >-
        RBM margin for cash market:

        - for each margin class: AM and CLM in margin class currency,
        corresponding to CI050 report
          - for each ISIN/settlement date combination from the margin class: current liquidating margin, net cash position and net security position, corresponding to CC711 report (if there are multiple records for ISIN/settlement date in CC711, the values are summed)
      properties:
        margin_classes:
          type: array
          items:
            type: object
            description: >-
              Margin on margin class level
              $primary_keys(margin_class_code)
            properties:
              margin_class_code:
                $ref: '#/components/schemas/margin_class_code'
              margin_group_code:
                $ref: '#/components/schemas/margin_group_code'
              margin_parameter:
                type: number
                description: Margin parameter
                example: 3.5
              margin_parameter_flag:
                type: string
                enum:
                  - A
                  - P
                description: Margin parameter flag - absolute (A) or percentage (P)
                example: P
              cash_interest_rate:
                type: number
                description: Cash interest rate (see report CC711)
                example: -0.566
              additional_margin:
                $ref: '#/components/schemas/additional_margin'
              additional_margin_before_grouping:
                $ref: '#/components/schemas/additional_margin_before_grouping'
              current_liquidating_margin:
                $ref: '#/components/schemas/current_liquidating_margin'
              margin_class_currency:
                type: string
                description: >-
                  Code of the margin class currency - margin is calculated in
                  that currency
                example: USD
              positions:
                type: array
                items:
                  type: object
                  description: >-
                    Positions of the margin class
                    $primary_keys(line_no)
                  properties:
                    line_no:
                      $ref: '#/components/schemas/line_no'
                    sec_isin:
                      $ref: '#/components/schemas/sec_isin'
                    sec_name:
                      $ref: '#/components/schemas/sec_name'
                    settlement_date:
                      $ref: '#/components/schemas/settlement_date'
                    net_security_position:
                      type: number
                      description: Net cash position (see report CC711)
                    net_cash_position:
                      type: number
                      description: Net cash position (see report CC711)
                    amount_clv_secu:
                      type: number
                      description: >-
                        CrtLiqValSecu i.e. Current Liquidating Value Secu (see
                        report CC711)
                    amount_clv_cash:
                      type: number
                      description: >-
                        CrtLiqValCash i.e. Current Liquidating Value Cash (see
                        report CC711)
                    current_liquidating_margin:
                      $ref: '#/components/schemas/current_liquidating_margin'
                    trade_id:
                      $ref: '#/components/schemas/trade_id'
    liquidation_group:
      type: string
      description: Liquidation group
    liquidation_group_split:
      type: string
      description: Liquidation group split
    component_margin:
      type: number
      description: >-
        Initial margin on position level is a approximation based on compVaR.
        compVaR is calculated to split VaR among positions, then other add-ons
        are added proportionally to compVaR
    component_margin_currency:
      type: string
      description: Currency of component margin
    trade_id:
      type: string
      description: internalTradeID or tradeId as submitted in the request
      example: '1'
    otc_type:
      type: string
      description: FRA, FixedFloat, Basis, OIS or Inflation
      example: FRA
    pay:
      type: string
      description: pay leg, either Fixed rate or index plus optional spread
      example: Fixed 0.15%
    receive:
      type: string
      description: receive leg, either Fixed rate or index plus optional spread
      example: EUR-EURIBOR-3M +2bp
    notional:
      type: number
      description: trade notional
      example: 100000000
    notional_currency:
      type: string
      description: notional currency
      example: EUR
    otc_maturity:
      type: string
      description: total maturity since effective date, in years
      example: 0.8Y
    greek_types:
      type: array
      description: Greek types, array with the following valid values
      items:
        type: string
        enum:
          - DELTA
          - GAMMA
          - RHO
          - THETA
          - VEGA
          - DV01
          - EURO_DELTA
          - EURO_GAMMA
          - EURO_RHO
          - EURO_THETA
          - EURO_VEGA
      example:
        - EURO_DELTA
        - EURO_VEGA
    underlying_shifts_rel:
      type: array
      description: >-
        Vector of underlying price shifts, optional. If not given then the
        current underlying price is used
      items:
        type: number
      example:
        - -0.01
        - 0.01
    iids:
      type: array
      description: Technical ids of instruments, see series resource
      items:
        type: number
      example:
        - 26807581
        - 27471356
    volatility_shifts:
      type: array
      description: >-
        Vector of volatility shifts, the unit is specified by volatility shift
        type. Shifted volatility is floored by 0.01 before theoretical price
        calculation
      items:
        type: number
      example:
        - -0.05
        - 0.05
    volatility_shift_type:
      type: string
      enum:
        - RELATIVE
        - ABSOLUTE
      description: >-
        Volatility shift type, either relative, vola 20% shifted by 0.1 relative
        = 22%, or absolute, vola 20% shifted by 0.1 absolute = 20.1%
      example: ABSOLUTE

    error:
      type: string
      description: error message applicable to the whole request
      example: missing portfolio_components JSON array in body JSON
    errors:
      type: array
      items:
        type: object
        properties:
          line_no:
            type: string
          portfolio:
            type: string
            enum:
              - ETD
              - OTC
              - CASH
              - REPO
          error_msg:
            type: string
        required:
          - error_msg
      example:
        - error_msg: Request data is invalid
        - line_no: 1
          portfolio: ETD
          error_msg: "portfolio array item: missing net_ls_balance integer"

    global_scenario:
      type: string
      description: name of the global stress scenario
      example: Lehman crash 15.09.2008
    gscnid:
      type: number
      description: numerical id of the global scenario, used in /default_fund drilldown
      example: 1
    stress_loss_over_margin:
      type: number
      description: stress loss over margin in given scenario (negative means loss)
      example: -101808201.00
    stress_value:
      type: number
      description: stress value of the portfolio or position in given scenario (negative means loss)
      example: -107168880.00
    stress_value_market_risk:
      type: number
      description: stress value of the portfolio in given scenario (negative means loss), the market risk part (liquidity risk not included)
      example: -107168880.00
    stress_value_liquidity_risk:
      type: number
      description: additional liquidity risk in given scenario
      example: -1310.00
    total_margin_requirement:
      type: number
      description: additional liquidity risk in given scenario
      example: 5362113.00
    default_fund_requirement:
      type: number
      description: estimated default fund contribution (always non-negative)
      example: 16634756

    default_fund_contribution:
      type: object
      description: Estimated contribution to the Default Fund for submitted portfolio, based on the worst global scenario
      properties:
        worst_global_scenario:
          $ref: '#/components/schemas/global_scenario'
        currency:
          $ref: '#/components/schemas/clearing_currency'
        stress_loss_over_margin:
          $ref: '#/components/schemas/stress_loss_over_margin'
        default_fund_requirement:
          $ref: '#/components/schemas/default_fund_requirement'
        slom_drilldown:
          type: array
          items:
            type: object
            description: >-
              Result of the global scenario
              $primary_keys(global_scenario)
            properties:
              global_scenario:
                $ref: '#/components/schemas/global_scenario'
              stress_value:
                $ref: '#/components/schemas/stress_value'
              total_margin_requirement:
                $ref: '#/components/schemas/total_margin_requirement'
              stress_loss_over_margin:
                $ref: '#/components/schemas/stress_loss_over_margin'
              slom_per_lg_mg:
                type: array
                items:
                  type: object
                  description: >-
                    Result for the Liquidation Group (if ETD) or the Margin Group (if Cash Market)
                    in given global scenario. Either the liquidation_group or margin_group is filled.
                    Margin Classes that do not belong to a Margin Group are listed on this level
                    as well and their margin_group_code is equal to margin_class_code prefixed by '!'.
                    $primary_keys(liquidation_group,margin_group_code)
                  properties:
                    liquidation_group:
                      $ref: '#/components/schemas/liquidation_group'
                    margin_group_code:
                      $ref: '#/components/schemas/margin_group_code'
                    stress_value_market_risk:
                      $ref: '#/components/schemas/stress_value_market_risk'
                    stress_value_liquidity_risk:
                      $ref: '#/components/schemas/stress_value_liquidity_risk'
                    total_margin_requirement:
                      $ref: '#/components/schemas/total_margin_requirement'
                    stress_loss_over_margin:
                      $ref: '#/components/schemas/stress_loss_over_margin'
                    slom_per_lgs_mc:
                      type: array
                      items:
                        type: object
                        description: >-
                          Result for the Liquidation Group Split or Margin Class.
                          $primary_keys(liquidation_group_split)
                        properties:
                          liquidation_group_split:
                            $ref: '#/components/schemas/liquidation_group_split'
                          margin_class_code:
                            $ref: '#/components/schemas/margin_class_code'
                          stress_value_market_risk:
                            $ref: '#/components/schemas/stress_value_market_risk'
                          stress_value_liquidity_risk:
                            $ref: '#/components/schemas/stress_value_liquidity_risk'
                          total_margin_requirement:
                            $ref: '#/components/schemas/total_margin_requirement'
                          stress_loss_over_margin:
                            $ref: '#/components/schemas/stress_loss_over_margin'
                          worst_system_scnid:
                            type: number

    etd_positions:
      type: array
      description: >-
        Margin figures on ETD position level. Full business key is used,
        it is not possible to map to input line_no one to one because positions may be aggregated or split.
        $primary_keys(iid,liquidation_group_split)
      items:
        type: object
        properties:
          line_no:
            $ref: '#/components/schemas/line_no'
          product_id:
            $ref: '#/components/schemas/product_id'
          contract_date:
            $ref: '#/components/schemas/contract_date'
          maturity:
            $ref: '#/components/schemas/maturity'
          call_put_flag:
            $ref: '#/components/schemas/call_put_flag'
          exercise_price:
            $ref: '#/components/schemas/exercise_price'
          version_number:
            $ref: '#/components/schemas/version_number'
          iid:
            $ref: '#/components/schemas/iid'
          instrument_type:
            $ref: '#/components/schemas/instrument_type'
          exercise_style:
            $ref: '#/components/schemas/exercise_style'
          net_ls_balance:
            $ref: '#/components/schemas/net_ls_balance'
          liquidation_group:
            $ref: '#/components/schemas/liquidation_group'
          liquidation_group_split:
            $ref: '#/components/schemas/liquidation_group_split'
          component_margin:
            $ref: '#/components/schemas/component_margin'
          component_margin_currency:
            $ref: '#/components/schemas/component_margin_currency'
          premium_margin:
            type: number
            description: Premium margin for the position
          premium_margin_currency:
            type: string
            description: >-
              Currency of premium margin - currency of the
              product, can be different from clearing currency

    etd_positions_stress:
      type: array
      description: >-
        Stress values ETD position level. Full business key is used,
        it is not possible to map to input line_no one to one because positions may be aggregated or split.
      items:
        type: object
        description: >-
          $primary_keys(iid,liquidation_group_split)
        properties:
          line_no:
            $ref: '#/components/schemas/line_no'
          product_id:
            $ref: '#/components/schemas/product_id'
          contract_date:
            $ref: '#/components/schemas/contract_date'
          maturity:
            $ref: '#/components/schemas/maturity'
          call_put_flag:
            $ref: '#/components/schemas/call_put_flag'
          exercise_price:
            $ref: '#/components/schemas/exercise_price'
          version_number:
            $ref: '#/components/schemas/version_number'
          iid:
            $ref: '#/components/schemas/iid'
          instrument_type:
            $ref: '#/components/schemas/instrument_type'
          exercise_style:
            $ref: '#/components/schemas/exercise_style'
          net_ls_balance:
            $ref: '#/components/schemas/net_ls_balance'
          liquidation_group:
            $ref: '#/components/schemas/liquidation_group'
          liquidation_group_split:
            $ref: '#/components/schemas/liquidation_group_split'
          stress_values_per_global_scenario:
            type: array
            description: >-
              Stress value of the position in different scenarios, in `clearing_currency`.
              For scenario names, use GET `/global_scenarios` resource and find the scenarios by gscnid.
              $primary_keys(gscnid)
            items:
              type: object
              properties:
                gscnid:
                  $ref: '#/components/schemas/gscnid'
                stress_value:
                  $ref: '#/components/schemas/stress_value'

    product_indicative_margin:
      type: object
      description: >-
        $primary_keys(product_id)
      properties:
        liquidation_group:
          $ref: '#/components/schemas/liquidation_group'
        product_id:
          $ref: '#/components/schemas/product_id'
        prod_name:
          type: string
          example: FUT ON EURO STOXX 50
        margin_currency:
          $ref: '#/components/schemas/currency'
        long_initial_margin:
          type: number
          description: long_initial_margin_cash in EUR / (underlying price in EUR * trade unit value)
          example: 0.0716427734211302
        long_initial_margin_cash:
          type: number
          description: initial margin for one long contract in EUR
          example: 3039.5879479382907
        short_initial_margin:
          type: number
          description: short_initial_margin_cash in EUR / (underlying price in EUR * trade unit value)
          example: 0.06737660845841252
        short_initial_margin_cash:
          type: number
          description: initial margin for one short contract in EUR
          example: 2858.587367065068

    otc_product_indicative_margin:
      type: object
      description: >-
        $primary_keys(product_id)
      properties:
        liquidation_group:
          $ref: '#/components/schemas/liquidation_group'
        product_id:
          type: string
          description: short id of the OTC product
          example: CHF_ON_5Y
        prod_name:
          type: string
          description: longer name of the OTC product
          example: CHF SARON ON Swap 5Y
        margin_currency:
          $ref: '#/components/schemas/currency'
        payer_initial_margin_per_dv01:
          type: number
          description: payer_initial_margin_cash / abs(payer_dv01) (both figures in EUR)
          example: 41.0
        payer_initial_margin_cash:
          type: number
          description: initial margin in EUR for trade with payer_dv01
          example: 4100000.0
        payer_dv01:
          type: number
          description: DV01 of the trade in product currency, payer side
          example: 96000.0
        payer_dv01_eur:
          type: number
          description: DV01 of the trade in EUR, payer side
          example: 100000.0
        receiver_initial_margin_per_dv01:
          type: number
          description: receiver_initial_margin_cash / abs(receiver_dv01) (both figures in EUR)
          example: 39.0
        receiver_initial_margin_cash:
          type: number
          description: initial margin in EUR for trade with receiver_dv01
          example: 3900000.0
        receiver_dv01:
          type: number
          description: DV01 of the trade in EUR, receiver side
          example: -96000.0
        receiver_dv01_eur:
          type: number
          description: DV01 of the trade in EUR, receiver side
          example: -100000.0

    currency_amount:
      type: object
      properties:
        currency:
          type: string
          example: USD
        amount:
          type: number
          example: 446.37538928000043

    otc_drilldowns:
      type: array
      description: >-
        Margin figures and short trade desription on OTC trade
        level. Internal Trade Id is used as a key.
        $primary_keys(trade_id)
      items:
        type: object
        properties:
          trade_id:
            $ref: '#/components/schemas/trade_id'
          liquidation_group:
            $ref: '#/components/schemas/liquidation_group'
          liquidation_group_split:
            $ref: '#/components/schemas/liquidation_group_split'
          npv:
            type: number
            description: Net Present Value of the trade in notional currency
          dv01:
            type: number
            description: DV01 (interest rate) sensitivity of the trade in notional currency
          ie01:
            type: number
            description: IE01 (inflation rate) sensitivity of the trade in notional currency - optional
          component_margin:
            $ref: '#/components/schemas/component_margin'
          component_margin_currency:
            $ref: '#/components/schemas/component_margin_currency'
          type:
            $ref: '#/components/schemas/otc_type'
          pay:
            $ref: '#/components/schemas/pay'
          receive:
            $ref: '#/components/schemas/receive'
          notional:
            $ref: '#/components/schemas/notional'
          notional_currency:
            $ref: '#/components/schemas/notional_currency'
          maturity:
            $ref: '#/components/schemas/otc_maturity'

    otc_trades_stress:
      type: array
      description: >-
        Stress values on OTC trdae level, including short trade description.
        Internal Trade Id is used as a key.
        $primary_keys(trade_id)
      items:
        type: object
        properties:
          trade_id:
            $ref: '#/components/schemas/trade_id'
          liquidation_group:
            $ref: '#/components/schemas/liquidation_group'
          liquidation_group_split:
            $ref: '#/components/schemas/liquidation_group_split'
          npv:
            type: number
            description: Net Present Value of the trade in notional currency
          dv01:
            type: number
            description: DV01 (interest rate) sensitivity of the trade in notional currency
          ie01:
            type: number
            description: IE01 (inflation rate) sensitivity of the trade in notional currency - optional
          type:
            $ref: '#/components/schemas/otc_type'
          pay:
            $ref: '#/components/schemas/pay'
          receive:
            $ref: '#/components/schemas/receive'
          notional:
            $ref: '#/components/schemas/notional'
          notional_currency:
            $ref: '#/components/schemas/notional_currency'
          maturity:
            $ref: '#/components/schemas/otc_maturity'
          stress_values_per_global_scenario:
            type: array
            description: >-
              Stress value of the trade in different scenarios, in `clearing_currency`.
              For scenario names, use GET `/global_scenarios` resource and find the scenarios by gscnid.
              $primary_keys(gscnid)
            items:
              type: object
              properties:
                gscnid:
                  $ref: '#/components/schemas/gscnid'
                stress_value:
                  $ref: '#/components/schemas/stress_value'
